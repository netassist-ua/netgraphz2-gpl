<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: ng_backend.proto
//   Date: 2016-03-02 15:57:25

namespace ng_rpc {

  class AllMetricsRequest extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $n_skip = null;
    
    /**  @var int */
    public $n_take = null;
    
    /**  @var boolean */
    public $filter_host_name = null;
    
    /**  @var string */
    public $host_name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ng_rpc.AllMetricsRequest');

      // REQUIRED INT64 n_skip = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "n_skip";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT64 n_take = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "n_take";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED BOOL filter_host_name = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "filter_host_name";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING host_name = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "host_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <n_skip> has a value
     *
     * @return boolean
     */
    public function hasNSkip(){
      return $this->_has(1);
    }
    
    /**
     * Clear <n_skip> value
     *
     * @return \ng_rpc\AllMetricsRequest
     */
    public function clearNSkip(){
      return $this->_clear(1);
    }
    
    /**
     * Get <n_skip> value
     *
     * @return int
     */
    public function getNSkip(){
      return $this->_get(1);
    }
    
    /**
     * Set <n_skip> value
     *
     * @param int $value
     * @return \ng_rpc\AllMetricsRequest
     */
    public function setNSkip( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <n_take> has a value
     *
     * @return boolean
     */
    public function hasNTake(){
      return $this->_has(2);
    }
    
    /**
     * Clear <n_take> value
     *
     * @return \ng_rpc\AllMetricsRequest
     */
    public function clearNTake(){
      return $this->_clear(2);
    }
    
    /**
     * Get <n_take> value
     *
     * @return int
     */
    public function getNTake(){
      return $this->_get(2);
    }
    
    /**
     * Set <n_take> value
     *
     * @param int $value
     * @return \ng_rpc\AllMetricsRequest
     */
    public function setNTake( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <filter_host_name> has a value
     *
     * @return boolean
     */
    public function hasFilterHostName(){
      return $this->_has(3);
    }
    
    /**
     * Clear <filter_host_name> value
     *
     * @return \ng_rpc\AllMetricsRequest
     */
    public function clearFilterHostName(){
      return $this->_clear(3);
    }
    
    /**
     * Get <filter_host_name> value
     *
     * @return boolean
     */
    public function getFilterHostName(){
      return $this->_get(3);
    }
    
    /**
     * Set <filter_host_name> value
     *
     * @param boolean $value
     * @return \ng_rpc\AllMetricsRequest
     */
    public function setFilterHostName( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <host_name> has a value
     *
     * @return boolean
     */
    public function hasHostName(){
      return $this->_has(10);
    }
    
    /**
     * Clear <host_name> value
     *
     * @return \ng_rpc\AllMetricsRequest
     */
    public function clearHostName(){
      return $this->_clear(10);
    }
    
    /**
     * Get <host_name> value
     *
     * @return string
     */
    public function getHostName(){
      return $this->_get(10);
    }
    
    /**
     * Set <host_name> value
     *
     * @param string $value
     * @return \ng_rpc\AllMetricsRequest
     */
    public function setHostName( $value){
      return $this->_set(10, $value);
    }
  }
}

namespace ng_rpc\Metric {

  class Kind extends \DrSlump\Protobuf\Enum {
    const GAUGE = 1;
    const DERIVE = 2;
    const COUNTER = 3;
    const OTHER = 4;
  }
}
namespace ng_rpc {

  class Metric extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var int - \ng_rpc\Metric\Kind */
    public $kind = null;
    
    /**  @var int */
    public $n_records = null;
    
    /**  @var int */
    public $time_last_record = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ng_rpc.Metric');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED ENUM kind = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "kind";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\ng_rpc\Metric\Kind';
      $descriptor->addField($f);

      // REQUIRED INT64 n_records = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "n_records";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT64 time_last_record = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "time_last_record";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \ng_rpc\Metric
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \ng_rpc\Metric
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <kind> has a value
     *
     * @return boolean
     */
    public function hasKind(){
      return $this->_has(2);
    }
    
    /**
     * Clear <kind> value
     *
     * @return \ng_rpc\Metric
     */
    public function clearKind(){
      return $this->_clear(2);
    }
    
    /**
     * Get <kind> value
     *
     * @return int - \ng_rpc\Metric\Kind
     */
    public function getKind(){
      return $this->_get(2);
    }
    
    /**
     * Set <kind> value
     *
     * @param int - \ng_rpc\Metric\Kind $value
     * @return \ng_rpc\Metric
     */
    public function setKind( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <n_records> has a value
     *
     * @return boolean
     */
    public function hasNRecords(){
      return $this->_has(3);
    }
    
    /**
     * Clear <n_records> value
     *
     * @return \ng_rpc\Metric
     */
    public function clearNRecords(){
      return $this->_clear(3);
    }
    
    /**
     * Get <n_records> value
     *
     * @return int
     */
    public function getNRecords(){
      return $this->_get(3);
    }
    
    /**
     * Set <n_records> value
     *
     * @param int $value
     * @return \ng_rpc\Metric
     */
    public function setNRecords( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <time_last_record> has a value
     *
     * @return boolean
     */
    public function hasTimeLastRecord(){
      return $this->_has(4);
    }
    
    /**
     * Clear <time_last_record> value
     *
     * @return \ng_rpc\Metric
     */
    public function clearTimeLastRecord(){
      return $this->_clear(4);
    }
    
    /**
     * Get <time_last_record> value
     *
     * @return int
     */
    public function getTimeLastRecord(){
      return $this->_get(4);
    }
    
    /**
     * Set <time_last_record> value
     *
     * @param int $value
     * @return \ng_rpc\Metric
     */
    public function setTimeLastRecord( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace ng_rpc {

  class StatusRequest extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $time = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ng_rpc.StatusRequest');

      // REQUIRED INT64 time = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "time";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <time> has a value
     *
     * @return boolean
     */
    public function hasTime(){
      return $this->_has(1);
    }
    
    /**
     * Clear <time> value
     *
     * @return \ng_rpc\StatusRequest
     */
    public function clearTime(){
      return $this->_clear(1);
    }
    
    /**
     * Get <time> value
     *
     * @return int
     */
    public function getTime(){
      return $this->_get(1);
    }
    
    /**
     * Set <time> value
     *
     * @param int $value
     * @return \ng_rpc\StatusRequest
     */
    public function setTime( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace ng_rpc {

  class StatusResponse extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $n_nodes = null;
    
    /**  @var int */
    public $n_links = null;
    
    /**  @var int */
    public $n_metrics = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ng_rpc.StatusResponse');

      // REQUIRED INT32 n_nodes = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "n_nodes";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 n_links = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "n_links";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 n_metrics = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "n_metrics";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <n_nodes> has a value
     *
     * @return boolean
     */
    public function hasNNodes(){
      return $this->_has(1);
    }
    
    /**
     * Clear <n_nodes> value
     *
     * @return \ng_rpc\StatusResponse
     */
    public function clearNNodes(){
      return $this->_clear(1);
    }
    
    /**
     * Get <n_nodes> value
     *
     * @return int
     */
    public function getNNodes(){
      return $this->_get(1);
    }
    
    /**
     * Set <n_nodes> value
     *
     * @param int $value
     * @return \ng_rpc\StatusResponse
     */
    public function setNNodes( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <n_links> has a value
     *
     * @return boolean
     */
    public function hasNLinks(){
      return $this->_has(2);
    }
    
    /**
     * Clear <n_links> value
     *
     * @return \ng_rpc\StatusResponse
     */
    public function clearNLinks(){
      return $this->_clear(2);
    }
    
    /**
     * Get <n_links> value
     *
     * @return int
     */
    public function getNLinks(){
      return $this->_get(2);
    }
    
    /**
     * Set <n_links> value
     *
     * @param int $value
     * @return \ng_rpc\StatusResponse
     */
    public function setNLinks( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <n_metrics> has a value
     *
     * @return boolean
     */
    public function hasNMetrics(){
      return $this->_has(3);
    }
    
    /**
     * Clear <n_metrics> value
     *
     * @return \ng_rpc\StatusResponse
     */
    public function clearNMetrics(){
      return $this->_clear(3);
    }
    
    /**
     * Get <n_metrics> value
     *
     * @return int
     */
    public function getNMetrics(){
      return $this->_get(3);
    }
    
    /**
     * Set <n_metrics> value
     *
     * @param int $value
     * @return \ng_rpc\StatusResponse
     */
    public function setNMetrics( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace ng_rpc {

  class LinkByIdRequest extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $link_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ng_rpc.LinkByIdRequest');

      // REQUIRED INT32 link_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "link_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <link_id> has a value
     *
     * @return boolean
     */
    public function hasLinkId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <link_id> value
     *
     * @return \ng_rpc\LinkByIdRequest
     */
    public function clearLinkId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <link_id> value
     *
     * @return int
     */
    public function getLinkId(){
      return $this->_get(1);
    }
    
    /**
     * Set <link_id> value
     *
     * @param int $value
     * @return \ng_rpc\LinkByIdRequest
     */
    public function setLinkId( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace ng_rpc {

  class LinksAllRequest extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $last_id = null;
    
    /**  @var int */
    public $n_take = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ng_rpc.LinksAllRequest');

      // REQUIRED INT32 last_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "last_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 n_take = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "n_take";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <last_id> has a value
     *
     * @return boolean
     */
    public function hasLastId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <last_id> value
     *
     * @return \ng_rpc\LinksAllRequest
     */
    public function clearLastId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <last_id> value
     *
     * @return int
     */
    public function getLastId(){
      return $this->_get(1);
    }
    
    /**
     * Set <last_id> value
     *
     * @param int $value
     * @return \ng_rpc\LinksAllRequest
     */
    public function setLastId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <n_take> has a value
     *
     * @return boolean
     */
    public function hasNTake(){
      return $this->_has(2);
    }
    
    /**
     * Clear <n_take> value
     *
     * @return \ng_rpc\LinksAllRequest
     */
    public function clearNTake(){
      return $this->_clear(2);
    }
    
    /**
     * Get <n_take> value
     *
     * @return int
     */
    public function getNTake(){
      return $this->_get(2);
    }
    
    /**
     * Set <n_take> value
     *
     * @param int $value
     * @return \ng_rpc\LinksAllRequest
     */
    public function setNTake( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace ng_rpc {

  class NodeByIdRequest extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $node_id = null;
    
    /**  @var boolean */
    public $include_state = null;
    
    /**  @var int */
    public $include_metrics = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ng_rpc.NodeByIdRequest');

      // REQUIRED INT32 node_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "node_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED BOOL include_state = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "include_state";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 include_metrics = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "include_metrics";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <node_id> has a value
     *
     * @return boolean
     */
    public function hasNodeId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <node_id> value
     *
     * @return \ng_rpc\NodeByIdRequest
     */
    public function clearNodeId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <node_id> value
     *
     * @return int
     */
    public function getNodeId(){
      return $this->_get(1);
    }
    
    /**
     * Set <node_id> value
     *
     * @param int $value
     * @return \ng_rpc\NodeByIdRequest
     */
    public function setNodeId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <include_state> has a value
     *
     * @return boolean
     */
    public function hasIncludeState(){
      return $this->_has(2);
    }
    
    /**
     * Clear <include_state> value
     *
     * @return \ng_rpc\NodeByIdRequest
     */
    public function clearIncludeState(){
      return $this->_clear(2);
    }
    
    /**
     * Get <include_state> value
     *
     * @return boolean
     */
    public function getIncludeState(){
      return $this->_get(2);
    }
    
    /**
     * Set <include_state> value
     *
     * @param boolean $value
     * @return \ng_rpc\NodeByIdRequest
     */
    public function setIncludeState( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <include_metrics> has a value
     *
     * @return boolean
     */
    public function hasIncludeMetrics(){
      return $this->_has(3);
    }
    
    /**
     * Clear <include_metrics> value
     *
     * @return \ng_rpc\NodeByIdRequest
     */
    public function clearIncludeMetrics(){
      return $this->_clear(3);
    }
    
    /**
     * Get <include_metrics> value
     *
     * @return int
     */
    public function getIncludeMetrics(){
      return $this->_get(3);
    }
    
    /**
     * Set <include_metrics> value
     *
     * @param int $value
     * @return \ng_rpc\NodeByIdRequest
     */
    public function setIncludeMetrics( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace ng_rpc {

  class NodesAllRequest extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $last_id = null;
    
    /**  @var int */
    public $n_take = null;
    
    /**  @var boolean */
    public $include_state = null;
    
    /**  @var int */
    public $include_last_metrics = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ng_rpc.NodesAllRequest');

      // REQUIRED INT32 last_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "last_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 n_take = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "n_take";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED BOOL include_state = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "include_state";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 include_last_metrics = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "include_last_metrics";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <last_id> has a value
     *
     * @return boolean
     */
    public function hasLastId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <last_id> value
     *
     * @return \ng_rpc\NodesAllRequest
     */
    public function clearLastId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <last_id> value
     *
     * @return int
     */
    public function getLastId(){
      return $this->_get(1);
    }
    
    /**
     * Set <last_id> value
     *
     * @param int $value
     * @return \ng_rpc\NodesAllRequest
     */
    public function setLastId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <n_take> has a value
     *
     * @return boolean
     */
    public function hasNTake(){
      return $this->_has(2);
    }
    
    /**
     * Clear <n_take> value
     *
     * @return \ng_rpc\NodesAllRequest
     */
    public function clearNTake(){
      return $this->_clear(2);
    }
    
    /**
     * Get <n_take> value
     *
     * @return int
     */
    public function getNTake(){
      return $this->_get(2);
    }
    
    /**
     * Set <n_take> value
     *
     * @param int $value
     * @return \ng_rpc\NodesAllRequest
     */
    public function setNTake( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <include_state> has a value
     *
     * @return boolean
     */
    public function hasIncludeState(){
      return $this->_has(3);
    }
    
    /**
     * Clear <include_state> value
     *
     * @return \ng_rpc\NodesAllRequest
     */
    public function clearIncludeState(){
      return $this->_clear(3);
    }
    
    /**
     * Get <include_state> value
     *
     * @return boolean
     */
    public function getIncludeState(){
      return $this->_get(3);
    }
    
    /**
     * Set <include_state> value
     *
     * @param boolean $value
     * @return \ng_rpc\NodesAllRequest
     */
    public function setIncludeState( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <include_last_metrics> has a value
     *
     * @return boolean
     */
    public function hasIncludeLastMetrics(){
      return $this->_has(4);
    }
    
    /**
     * Clear <include_last_metrics> value
     *
     * @return \ng_rpc\NodesAllRequest
     */
    public function clearIncludeLastMetrics(){
      return $this->_clear(4);
    }
    
    /**
     * Get <include_last_metrics> value
     *
     * @return int
     */
    public function getIncludeLastMetrics(){
      return $this->_get(4);
    }
    
    /**
     * Set <include_last_metrics> value
     *
     * @param int $value
     * @return \ng_rpc\NodesAllRequest
     */
    public function setIncludeLastMetrics( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace ng_rpc\Link {

  class LinkType extends \DrSlump\Protobuf\Enum {
    const FIBER = 0;
    const FIBER_TRANSPORT = 1;
    const COPPER = 2;
    const RADIO_WB = 3;
    const RADIO_80211_2GHZ = 4;
    const RADIO_80211_5GHZ = 5;
    const RADIO_LB = 6;
    const GSM = 7;
    const X25 = 8;
    const POWERLINE = 9;
  }
}
namespace ng_rpc {

  class Link extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var int */
    public $start_node_id = null;
    
    /**  @var int */
    public $end_node_id = null;
    
    /**  @var int */
    public $db_start_id = null;
    
    /**  @var int */
    public $db_end_id = null;
    
    /**  @var int */
    public $quality = null;
    
    /**  @var string */
    public $comment = null;
    
    /**  @var int - \ng_rpc\Link\LinkType */
    public $type = null;
    
    /**  @var string */
    public $rx_octets_metric = null;
    
    /**  @var string */
    public $tx_octets_metric = null;
    
    /**  @var int */
    public $capacity_mbit = null;
    
    /**  @var int */
    public $src_sw_port = null;
    
    /**  @var int */
    public $dst_sw_port = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ng_rpc.Link');

      // REQUIRED INT32 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 start_node_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "start_node_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 end_node_id = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "end_node_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 db_start_id = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "db_start_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 db_end_id = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "db_end_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 quality = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "quality";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING comment = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "comment";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM type = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\ng_rpc\Link\LinkType';
      $descriptor->addField($f);

      // OPTIONAL STRING rx_octets_metric = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "rx_octets_metric";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING tx_octets_metric = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "tx_octets_metric";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 capacity_mbit = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "capacity_mbit";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 src_sw_port = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "src_sw_port";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 dst_sw_port = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "dst_sw_port";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \ng_rpc\Link
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \ng_rpc\Link
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <start_node_id> has a value
     *
     * @return boolean
     */
    public function hasStartNodeId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <start_node_id> value
     *
     * @return \ng_rpc\Link
     */
    public function clearStartNodeId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <start_node_id> value
     *
     * @return int
     */
    public function getStartNodeId(){
      return $this->_get(2);
    }
    
    /**
     * Set <start_node_id> value
     *
     * @param int $value
     * @return \ng_rpc\Link
     */
    public function setStartNodeId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <end_node_id> has a value
     *
     * @return boolean
     */
    public function hasEndNodeId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <end_node_id> value
     *
     * @return \ng_rpc\Link
     */
    public function clearEndNodeId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <end_node_id> value
     *
     * @return int
     */
    public function getEndNodeId(){
      return $this->_get(3);
    }
    
    /**
     * Set <end_node_id> value
     *
     * @param int $value
     * @return \ng_rpc\Link
     */
    public function setEndNodeId( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <db_start_id> has a value
     *
     * @return boolean
     */
    public function hasDbStartId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <db_start_id> value
     *
     * @return \ng_rpc\Link
     */
    public function clearDbStartId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <db_start_id> value
     *
     * @return int
     */
    public function getDbStartId(){
      return $this->_get(4);
    }
    
    /**
     * Set <db_start_id> value
     *
     * @param int $value
     * @return \ng_rpc\Link
     */
    public function setDbStartId( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <db_end_id> has a value
     *
     * @return boolean
     */
    public function hasDbEndId(){
      return $this->_has(5);
    }
    
    /**
     * Clear <db_end_id> value
     *
     * @return \ng_rpc\Link
     */
    public function clearDbEndId(){
      return $this->_clear(5);
    }
    
    /**
     * Get <db_end_id> value
     *
     * @return int
     */
    public function getDbEndId(){
      return $this->_get(5);
    }
    
    /**
     * Set <db_end_id> value
     *
     * @param int $value
     * @return \ng_rpc\Link
     */
    public function setDbEndId( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <quality> has a value
     *
     * @return boolean
     */
    public function hasQuality(){
      return $this->_has(6);
    }
    
    /**
     * Clear <quality> value
     *
     * @return \ng_rpc\Link
     */
    public function clearQuality(){
      return $this->_clear(6);
    }
    
    /**
     * Get <quality> value
     *
     * @return int
     */
    public function getQuality(){
      return $this->_get(6);
    }
    
    /**
     * Set <quality> value
     *
     * @param int $value
     * @return \ng_rpc\Link
     */
    public function setQuality( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <comment> has a value
     *
     * @return boolean
     */
    public function hasComment(){
      return $this->_has(7);
    }
    
    /**
     * Clear <comment> value
     *
     * @return \ng_rpc\Link
     */
    public function clearComment(){
      return $this->_clear(7);
    }
    
    /**
     * Get <comment> value
     *
     * @return string
     */
    public function getComment(){
      return $this->_get(7);
    }
    
    /**
     * Set <comment> value
     *
     * @param string $value
     * @return \ng_rpc\Link
     */
    public function setComment( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(8);
    }
    
    /**
     * Clear <type> value
     *
     * @return \ng_rpc\Link
     */
    public function clearType(){
      return $this->_clear(8);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \ng_rpc\Link\LinkType
     */
    public function getType(){
      return $this->_get(8);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \ng_rpc\Link\LinkType $value
     * @return \ng_rpc\Link
     */
    public function setType( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <rx_octets_metric> has a value
     *
     * @return boolean
     */
    public function hasRxOctetsMetric(){
      return $this->_has(9);
    }
    
    /**
     * Clear <rx_octets_metric> value
     *
     * @return \ng_rpc\Link
     */
    public function clearRxOctetsMetric(){
      return $this->_clear(9);
    }
    
    /**
     * Get <rx_octets_metric> value
     *
     * @return string
     */
    public function getRxOctetsMetric(){
      return $this->_get(9);
    }
    
    /**
     * Set <rx_octets_metric> value
     *
     * @param string $value
     * @return \ng_rpc\Link
     */
    public function setRxOctetsMetric( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <tx_octets_metric> has a value
     *
     * @return boolean
     */
    public function hasTxOctetsMetric(){
      return $this->_has(10);
    }
    
    /**
     * Clear <tx_octets_metric> value
     *
     * @return \ng_rpc\Link
     */
    public function clearTxOctetsMetric(){
      return $this->_clear(10);
    }
    
    /**
     * Get <tx_octets_metric> value
     *
     * @return string
     */
    public function getTxOctetsMetric(){
      return $this->_get(10);
    }
    
    /**
     * Set <tx_octets_metric> value
     *
     * @param string $value
     * @return \ng_rpc\Link
     */
    public function setTxOctetsMetric( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <capacity_mbit> has a value
     *
     * @return boolean
     */
    public function hasCapacityMbit(){
      return $this->_has(11);
    }
    
    /**
     * Clear <capacity_mbit> value
     *
     * @return \ng_rpc\Link
     */
    public function clearCapacityMbit(){
      return $this->_clear(11);
    }
    
    /**
     * Get <capacity_mbit> value
     *
     * @return int
     */
    public function getCapacityMbit(){
      return $this->_get(11);
    }
    
    /**
     * Set <capacity_mbit> value
     *
     * @param int $value
     * @return \ng_rpc\Link
     */
    public function setCapacityMbit( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <src_sw_port> has a value
     *
     * @return boolean
     */
    public function hasSrcSwPort(){
      return $this->_has(12);
    }
    
    /**
     * Clear <src_sw_port> value
     *
     * @return \ng_rpc\Link
     */
    public function clearSrcSwPort(){
      return $this->_clear(12);
    }
    
    /**
     * Get <src_sw_port> value
     *
     * @return int
     */
    public function getSrcSwPort(){
      return $this->_get(12);
    }
    
    /**
     * Set <src_sw_port> value
     *
     * @param int $value
     * @return \ng_rpc\Link
     */
    public function setSrcSwPort( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <dst_sw_port> has a value
     *
     * @return boolean
     */
    public function hasDstSwPort(){
      return $this->_has(13);
    }
    
    /**
     * Clear <dst_sw_port> value
     *
     * @return \ng_rpc\Link
     */
    public function clearDstSwPort(){
      return $this->_clear(13);
    }
    
    /**
     * Get <dst_sw_port> value
     *
     * @return int
     */
    public function getDstSwPort(){
      return $this->_get(13);
    }
    
    /**
     * Set <dst_sw_port> value
     *
     * @param int $value
     * @return \ng_rpc\Link
     */
    public function setDstSwPort( $value){
      return $this->_set(13, $value);
    }
  }
}

namespace ng_rpc\MetricVal {

  class Kind extends \DrSlump\Protobuf\Enum {
    const GAUGE = 1;
    const DERIVE = 2;
    const COUNTER = 3;
    const OTHER = 4;
  }
}
namespace ng_rpc {

  class MetricVal extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $type = null;
    
    /**  @var int - \ng_rpc\MetricVal\Kind */
    public $kind = null;
    
    /**  @var int */
    public $time = null;
    
    /**  @var float */
    public $gauge_value = null;
    
    /**  @var int */
    public $derive_value = null;
    
    /**  @var int */
    public $counter_value = null;
    
    /**  @var string */
    public $other_value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ng_rpc.MetricVal');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED ENUM kind = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "kind";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\ng_rpc\MetricVal\Kind';
      $descriptor->addField($f);

      // REQUIRED UINT64 time = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "time";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL FLOAT gauge_value = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "gauge_value";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 derive_value = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "derive_value";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FIXED64 counter_value = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "counter_value";
      $f->type      = \DrSlump\Protobuf::TYPE_FIXED64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES other_value = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "other_value";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \ng_rpc\MetricVal
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \ng_rpc\MetricVal
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <type> value
     *
     * @return \ng_rpc\MetricVal
     */
    public function clearType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <type> value
     *
     * @return string
     */
    public function getType(){
      return $this->_get(2);
    }
    
    /**
     * Set <type> value
     *
     * @param string $value
     * @return \ng_rpc\MetricVal
     */
    public function setType( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <kind> has a value
     *
     * @return boolean
     */
    public function hasKind(){
      return $this->_has(3);
    }
    
    /**
     * Clear <kind> value
     *
     * @return \ng_rpc\MetricVal
     */
    public function clearKind(){
      return $this->_clear(3);
    }
    
    /**
     * Get <kind> value
     *
     * @return int - \ng_rpc\MetricVal\Kind
     */
    public function getKind(){
      return $this->_get(3);
    }
    
    /**
     * Set <kind> value
     *
     * @param int - \ng_rpc\MetricVal\Kind $value
     * @return \ng_rpc\MetricVal
     */
    public function setKind( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <time> has a value
     *
     * @return boolean
     */
    public function hasTime(){
      return $this->_has(4);
    }
    
    /**
     * Clear <time> value
     *
     * @return \ng_rpc\MetricVal
     */
    public function clearTime(){
      return $this->_clear(4);
    }
    
    /**
     * Get <time> value
     *
     * @return int
     */
    public function getTime(){
      return $this->_get(4);
    }
    
    /**
     * Set <time> value
     *
     * @param int $value
     * @return \ng_rpc\MetricVal
     */
    public function setTime( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <gauge_value> has a value
     *
     * @return boolean
     */
    public function hasGaugeValue(){
      return $this->_has(5);
    }
    
    /**
     * Clear <gauge_value> value
     *
     * @return \ng_rpc\MetricVal
     */
    public function clearGaugeValue(){
      return $this->_clear(5);
    }
    
    /**
     * Get <gauge_value> value
     *
     * @return float
     */
    public function getGaugeValue(){
      return $this->_get(5);
    }
    
    /**
     * Set <gauge_value> value
     *
     * @param float $value
     * @return \ng_rpc\MetricVal
     */
    public function setGaugeValue( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <derive_value> has a value
     *
     * @return boolean
     */
    public function hasDeriveValue(){
      return $this->_has(6);
    }
    
    /**
     * Clear <derive_value> value
     *
     * @return \ng_rpc\MetricVal
     */
    public function clearDeriveValue(){
      return $this->_clear(6);
    }
    
    /**
     * Get <derive_value> value
     *
     * @return int
     */
    public function getDeriveValue(){
      return $this->_get(6);
    }
    
    /**
     * Set <derive_value> value
     *
     * @param int $value
     * @return \ng_rpc\MetricVal
     */
    public function setDeriveValue( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <counter_value> has a value
     *
     * @return boolean
     */
    public function hasCounterValue(){
      return $this->_has(7);
    }
    
    /**
     * Clear <counter_value> value
     *
     * @return \ng_rpc\MetricVal
     */
    public function clearCounterValue(){
      return $this->_clear(7);
    }
    
    /**
     * Get <counter_value> value
     *
     * @return int
     */
    public function getCounterValue(){
      return $this->_get(7);
    }
    
    /**
     * Set <counter_value> value
     *
     * @param int $value
     * @return \ng_rpc\MetricVal
     */
    public function setCounterValue( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <other_value> has a value
     *
     * @return boolean
     */
    public function hasOtherValue(){
      return $this->_has(8);
    }
    
    /**
     * Clear <other_value> value
     *
     * @return \ng_rpc\MetricVal
     */
    public function clearOtherValue(){
      return $this->_clear(8);
    }
    
    /**
     * Get <other_value> value
     *
     * @return string
     */
    public function getOtherValue(){
      return $this->_get(8);
    }
    
    /**
     * Set <other_value> value
     *
     * @param string $value
     * @return \ng_rpc\MetricVal
     */
    public function setOtherValue( $value){
      return $this->_set(8, $value);
    }
  }
}

namespace ng_rpc\Node {

  class NodeType extends \DrSlump\Protobuf\Enum {
    const SW = 0;
    const SERVER = 1;
    const ROUTER = 2;
    const TRANSPORT = 3;
    const WIRELESS_AP = 4;
    const WIRELESS_BRIDGE = 5;
    const OTHER = 6;
  }
}
namespace ng_rpc\Node {

  class LastMetricValuesEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var \ng_rpc\MetricValCollection */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ng_rpc.Node.LastMetricValuesEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\ng_rpc\MetricValCollection';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \ng_rpc\Node\LastMetricValuesEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \ng_rpc\Node\LastMetricValuesEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \ng_rpc\Node\LastMetricValuesEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return \ng_rpc\MetricValCollection
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param \ng_rpc\MetricValCollection $value
     * @return \ng_rpc\Node\LastMetricValuesEntry
     */
    public function setValue(\ng_rpc\MetricValCollection $value){
      return $this->_set(2, $value);
    }
  }
}

namespace ng_rpc {

  class Node extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $address = null;
    
    /**  @var string */
    public $model = null;
    
    /**  @var string */
    public $mac_address = null;
    
    /**  @var int */
    public $ip4 = null;
    
    /**  @var string */
    public $ip6 = null;
    
    /**  @var string */
    public $comment = null;
    
    /**  @var int */
    public $db_id = null;
    
    /**  @var int */
    public $num_ports = null;
    
    /**  @var string */
    public $icinga_name = null;
    
    /**  @var string */
    public $serial = null;
    
    /**  @var \ng_rpc\NodeState[]  */
    public $states = array();
    
    /**  @var \ng_rpc\Node\LastMetricValuesEntry[]  */
    public $last_metric_values = array();
    
    /**  @var int - \ng_rpc\Node\NodeType */
    public $type = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ng_rpc.Node');

      // REQUIRED INT32 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING address = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "address";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING model = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "model";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING mac_address = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "mac_address";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 ip4 = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "ip4";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES ip6 = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "ip6";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING comment = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "comment";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 db_id = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "db_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FIXED32 num_ports = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "num_ports";
      $f->type      = \DrSlump\Protobuf::TYPE_FIXED32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING icinga_name = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "icinga_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING serial = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "serial";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE states = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "states";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\ng_rpc\NodeState';
      $descriptor->addField($f);

      // REPEATED MESSAGE last_metric_values = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "last_metric_values";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\ng_rpc\Node\LastMetricValuesEntry';
      $descriptor->addField($f);

      // OPTIONAL ENUM type = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\ng_rpc\Node\NodeType';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \ng_rpc\Node
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \ng_rpc\Node
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \ng_rpc\Node
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \ng_rpc\Node
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <address> has a value
     *
     * @return boolean
     */
    public function hasAddress(){
      return $this->_has(3);
    }
    
    /**
     * Clear <address> value
     *
     * @return \ng_rpc\Node
     */
    public function clearAddress(){
      return $this->_clear(3);
    }
    
    /**
     * Get <address> value
     *
     * @return string
     */
    public function getAddress(){
      return $this->_get(3);
    }
    
    /**
     * Set <address> value
     *
     * @param string $value
     * @return \ng_rpc\Node
     */
    public function setAddress( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <model> has a value
     *
     * @return boolean
     */
    public function hasModel(){
      return $this->_has(4);
    }
    
    /**
     * Clear <model> value
     *
     * @return \ng_rpc\Node
     */
    public function clearModel(){
      return $this->_clear(4);
    }
    
    /**
     * Get <model> value
     *
     * @return string
     */
    public function getModel(){
      return $this->_get(4);
    }
    
    /**
     * Set <model> value
     *
     * @param string $value
     * @return \ng_rpc\Node
     */
    public function setModel( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <mac_address> has a value
     *
     * @return boolean
     */
    public function hasMacAddress(){
      return $this->_has(5);
    }
    
    /**
     * Clear <mac_address> value
     *
     * @return \ng_rpc\Node
     */
    public function clearMacAddress(){
      return $this->_clear(5);
    }
    
    /**
     * Get <mac_address> value
     *
     * @return string
     */
    public function getMacAddress(){
      return $this->_get(5);
    }
    
    /**
     * Set <mac_address> value
     *
     * @param string $value
     * @return \ng_rpc\Node
     */
    public function setMacAddress( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <ip4> has a value
     *
     * @return boolean
     */
    public function hasIp4(){
      return $this->_has(6);
    }
    
    /**
     * Clear <ip4> value
     *
     * @return \ng_rpc\Node
     */
    public function clearIp4(){
      return $this->_clear(6);
    }
    
    /**
     * Get <ip4> value
     *
     * @return int
     */
    public function getIp4(){
      return $this->_get(6);
    }
    
    /**
     * Set <ip4> value
     *
     * @param int $value
     * @return \ng_rpc\Node
     */
    public function setIp4( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <ip6> has a value
     *
     * @return boolean
     */
    public function hasIp6(){
      return $this->_has(7);
    }
    
    /**
     * Clear <ip6> value
     *
     * @return \ng_rpc\Node
     */
    public function clearIp6(){
      return $this->_clear(7);
    }
    
    /**
     * Get <ip6> value
     *
     * @return string
     */
    public function getIp6(){
      return $this->_get(7);
    }
    
    /**
     * Set <ip6> value
     *
     * @param string $value
     * @return \ng_rpc\Node
     */
    public function setIp6( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <comment> has a value
     *
     * @return boolean
     */
    public function hasComment(){
      return $this->_has(8);
    }
    
    /**
     * Clear <comment> value
     *
     * @return \ng_rpc\Node
     */
    public function clearComment(){
      return $this->_clear(8);
    }
    
    /**
     * Get <comment> value
     *
     * @return string
     */
    public function getComment(){
      return $this->_get(8);
    }
    
    /**
     * Set <comment> value
     *
     * @param string $value
     * @return \ng_rpc\Node
     */
    public function setComment( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <db_id> has a value
     *
     * @return boolean
     */
    public function hasDbId(){
      return $this->_has(9);
    }
    
    /**
     * Clear <db_id> value
     *
     * @return \ng_rpc\Node
     */
    public function clearDbId(){
      return $this->_clear(9);
    }
    
    /**
     * Get <db_id> value
     *
     * @return int
     */
    public function getDbId(){
      return $this->_get(9);
    }
    
    /**
     * Set <db_id> value
     *
     * @param int $value
     * @return \ng_rpc\Node
     */
    public function setDbId( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <num_ports> has a value
     *
     * @return boolean
     */
    public function hasNumPorts(){
      return $this->_has(10);
    }
    
    /**
     * Clear <num_ports> value
     *
     * @return \ng_rpc\Node
     */
    public function clearNumPorts(){
      return $this->_clear(10);
    }
    
    /**
     * Get <num_ports> value
     *
     * @return int
     */
    public function getNumPorts(){
      return $this->_get(10);
    }
    
    /**
     * Set <num_ports> value
     *
     * @param int $value
     * @return \ng_rpc\Node
     */
    public function setNumPorts( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <icinga_name> has a value
     *
     * @return boolean
     */
    public function hasIcingaName(){
      return $this->_has(11);
    }
    
    /**
     * Clear <icinga_name> value
     *
     * @return \ng_rpc\Node
     */
    public function clearIcingaName(){
      return $this->_clear(11);
    }
    
    /**
     * Get <icinga_name> value
     *
     * @return string
     */
    public function getIcingaName(){
      return $this->_get(11);
    }
    
    /**
     * Set <icinga_name> value
     *
     * @param string $value
     * @return \ng_rpc\Node
     */
    public function setIcingaName( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <serial> has a value
     *
     * @return boolean
     */
    public function hasSerial(){
      return $this->_has(12);
    }
    
    /**
     * Clear <serial> value
     *
     * @return \ng_rpc\Node
     */
    public function clearSerial(){
      return $this->_clear(12);
    }
    
    /**
     * Get <serial> value
     *
     * @return string
     */
    public function getSerial(){
      return $this->_get(12);
    }
    
    /**
     * Set <serial> value
     *
     * @param string $value
     * @return \ng_rpc\Node
     */
    public function setSerial( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <states> has a value
     *
     * @return boolean
     */
    public function hasStates(){
      return $this->_has(13);
    }
    
    /**
     * Clear <states> value
     *
     * @return \ng_rpc\Node
     */
    public function clearStates(){
      return $this->_clear(13);
    }
    
    /**
     * Get <states> value
     *
     * @param int $idx
     * @return \ng_rpc\NodeState
     */
    public function getStates($idx = NULL){
      return $this->_get(13, $idx);
    }
    
    /**
     * Set <states> value
     *
     * @param \ng_rpc\NodeState $value
     * @return \ng_rpc\Node
     */
    public function setStates(\ng_rpc\NodeState $value, $idx = NULL){
      return $this->_set(13, $value, $idx);
    }
    
    /**
     * Get all elements of <states>
     *
     * @return \ng_rpc\NodeState[]
     */
    public function getStatesList(){
     return $this->_get(13);
    }
    
    /**
     * Add a new element to <states>
     *
     * @param \ng_rpc\NodeState $value
     * @return \ng_rpc\Node
     */
    public function addStates(\ng_rpc\NodeState $value){
     return $this->_add(13, $value);
    }
    
    /**
     * Check if <last_metric_values> has a value
     *
     * @return boolean
     */
    public function hasLastMetricValues(){
      return $this->_has(14);
    }
    
    /**
     * Clear <last_metric_values> value
     *
     * @return \ng_rpc\Node
     */
    public function clearLastMetricValues(){
      return $this->_clear(14);
    }
    
    /**
     * Get <last_metric_values> value
     *
     * @param int $idx
     * @return \ng_rpc\Node\LastMetricValuesEntry
     */
    public function getLastMetricValues($idx = NULL){
      return $this->_get(14, $idx);
    }
    
    /**
     * Set <last_metric_values> value
     *
     * @param \ng_rpc\Node\LastMetricValuesEntry $value
     * @return \ng_rpc\Node
     */
    public function setLastMetricValues(\ng_rpc\Node\LastMetricValuesEntry $value, $idx = NULL){
      return $this->_set(14, $value, $idx);
    }
    
    /**
     * Get all elements of <last_metric_values>
     *
     * @return \ng_rpc\Node\LastMetricValuesEntry[]
     */
    public function getLastMetricValuesList(){
     return $this->_get(14);
    }
    
    /**
     * Add a new element to <last_metric_values>
     *
     * @param \ng_rpc\Node\LastMetricValuesEntry $value
     * @return \ng_rpc\Node
     */
    public function addLastMetricValues(\ng_rpc\Node\LastMetricValuesEntry $value){
     return $this->_add(14, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(15);
    }
    
    /**
     * Clear <type> value
     *
     * @return \ng_rpc\Node
     */
    public function clearType(){
      return $this->_clear(15);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \ng_rpc\Node\NodeType
     */
    public function getType(){
      return $this->_get(15);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \ng_rpc\Node\NodeType $value
     * @return \ng_rpc\Node
     */
    public function setType( $value){
      return $this->_set(15, $value);
    }
  }
}

namespace ng_rpc {

  class MetricValCollection extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var \ng_rpc\MetricVal[]  */
    public $values = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ng_rpc.MetricValCollection');

      // REQUIRED STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE values = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "values";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\ng_rpc\MetricVal';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \ng_rpc\MetricValCollection
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \ng_rpc\MetricValCollection
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <values> has a value
     *
     * @return boolean
     */
    public function hasValues(){
      return $this->_has(1);
    }
    
    /**
     * Clear <values> value
     *
     * @return \ng_rpc\MetricValCollection
     */
    public function clearValues(){
      return $this->_clear(1);
    }
    
    /**
     * Get <values> value
     *
     * @param int $idx
     * @return \ng_rpc\MetricVal
     */
    public function getValues($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <values> value
     *
     * @param \ng_rpc\MetricVal $value
     * @return \ng_rpc\MetricValCollection
     */
    public function setValues(\ng_rpc\MetricVal $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <values>
     *
     * @return \ng_rpc\MetricVal[]
     */
    public function getValuesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <values>
     *
     * @param \ng_rpc\MetricVal $value
     * @return \ng_rpc\MetricValCollection
     */
    public function addValues(\ng_rpc\MetricVal $value){
     return $this->_add(1, $value);
    }
  }
}

namespace ng_rpc\NodeState {

  class State extends \DrSlump\Protobuf\Enum {
    const STATE_UP = 0;
    const STATE_DOWN = 1;
    const STATE_UNREACHABLE = 2;
  }
}
namespace ng_rpc\NodeState {

  class DescState extends \DrSlump\Protobuf\Enum {
    const D_STATE_UP = 0;
    const D_STATE_DOWN = 1;
    const D_STATE_WARNING = 2;
    const D_STATE_UNKNOWN = 3;
    const D_STATE_FLAPPING = 4;
  }
}
namespace ng_rpc {

  class NodeState extends \DrSlump\Protobuf\Message {

    /**  @var int - \ng_rpc\NodeState\State */
    public $state = null;
    
    /**  @var int - \ng_rpc\NodeState\State */
    public $hard_state = null;
    
    /**  @var int - \ng_rpc\NodeState\DescState */
    public $descriptive_state = null;
    
    /**  @var boolean */
    public $is_hard_state = null;
    
    /**  @var boolean */
    public $is_reachable = null;
    
    /**  @var boolean */
    public $is_flapping = null;
    
    /**  @var boolean */
    public $is_executing = null;
    
    /**  @var float */
    public $rtt = null;
    
    /**  @var float */
    public $loss = null;
    
    /**  @var int */
    public $time = null;
    
    /**  @var string */
    public $source = null;
    
    /**  @var string */
    public $output = null;
    
    /**  @var int */
    public $num_services = null;
    
    /**  @var int */
    public $num_services_ok = null;
    
    /**  @var int */
    public $num_services_warning = null;
    
    /**  @var int */
    public $num_services_pending = null;
    
    /**  @var int */
    public $num_services_critical = null;
    
    /**  @var int */
    public $num_services_unknown = null;
    
    /**  @var string */
    public $notes = null;
    
    /**  @var boolean */
    public $is_duplicate = null;
    
    /**  @var boolean */
    public $has_been_checked = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ng_rpc.NodeState');

      // REQUIRED ENUM state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\ng_rpc\NodeState\State';
      $descriptor->addField($f);

      // REQUIRED ENUM hard_state = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "hard_state";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\ng_rpc\NodeState\State';
      $descriptor->addField($f);

      // REQUIRED ENUM descriptive_state = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "descriptive_state";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\ng_rpc\NodeState\DescState';
      $descriptor->addField($f);

      // REQUIRED BOOL is_hard_state = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "is_hard_state";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED BOOL is_reachable = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "is_reachable";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED BOOL is_flapping = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "is_flapping";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED BOOL is_executing = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "is_executing";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED FLOAT rtt = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "rtt";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED FLOAT loss = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "loss";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED UINT64 time = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "time";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING source = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "source";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING output = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "output";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 num_services = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "num_services";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 num_services_ok = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "num_services_ok";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 num_services_warning = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "num_services_warning";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 num_services_pending = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "num_services_pending";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 num_services_critical = 17
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 17;
      $f->name      = "num_services_critical";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 num_services_unknown = 18
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 18;
      $f->name      = "num_services_unknown";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING notes = 19
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 19;
      $f->name      = "notes";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED BOOL is_duplicate = 20
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20;
      $f->name      = "is_duplicate";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED BOOL has_been_checked = 21
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 21;
      $f->name      = "has_been_checked";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \ng_rpc\NodeState
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return int - \ng_rpc\NodeState\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param int - \ng_rpc\NodeState\State $value
     * @return \ng_rpc\NodeState
     */
    public function setState( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <hard_state> has a value
     *
     * @return boolean
     */
    public function hasHardState(){
      return $this->_has(2);
    }
    
    /**
     * Clear <hard_state> value
     *
     * @return \ng_rpc\NodeState
     */
    public function clearHardState(){
      return $this->_clear(2);
    }
    
    /**
     * Get <hard_state> value
     *
     * @return int - \ng_rpc\NodeState\State
     */
    public function getHardState(){
      return $this->_get(2);
    }
    
    /**
     * Set <hard_state> value
     *
     * @param int - \ng_rpc\NodeState\State $value
     * @return \ng_rpc\NodeState
     */
    public function setHardState( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <descriptive_state> has a value
     *
     * @return boolean
     */
    public function hasDescriptiveState(){
      return $this->_has(3);
    }
    
    /**
     * Clear <descriptive_state> value
     *
     * @return \ng_rpc\NodeState
     */
    public function clearDescriptiveState(){
      return $this->_clear(3);
    }
    
    /**
     * Get <descriptive_state> value
     *
     * @return int - \ng_rpc\NodeState\DescState
     */
    public function getDescriptiveState(){
      return $this->_get(3);
    }
    
    /**
     * Set <descriptive_state> value
     *
     * @param int - \ng_rpc\NodeState\DescState $value
     * @return \ng_rpc\NodeState
     */
    public function setDescriptiveState( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <is_hard_state> has a value
     *
     * @return boolean
     */
    public function hasIsHardState(){
      return $this->_has(4);
    }
    
    /**
     * Clear <is_hard_state> value
     *
     * @return \ng_rpc\NodeState
     */
    public function clearIsHardState(){
      return $this->_clear(4);
    }
    
    /**
     * Get <is_hard_state> value
     *
     * @return boolean
     */
    public function getIsHardState(){
      return $this->_get(4);
    }
    
    /**
     * Set <is_hard_state> value
     *
     * @param boolean $value
     * @return \ng_rpc\NodeState
     */
    public function setIsHardState( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <is_reachable> has a value
     *
     * @return boolean
     */
    public function hasIsReachable(){
      return $this->_has(5);
    }
    
    /**
     * Clear <is_reachable> value
     *
     * @return \ng_rpc\NodeState
     */
    public function clearIsReachable(){
      return $this->_clear(5);
    }
    
    /**
     * Get <is_reachable> value
     *
     * @return boolean
     */
    public function getIsReachable(){
      return $this->_get(5);
    }
    
    /**
     * Set <is_reachable> value
     *
     * @param boolean $value
     * @return \ng_rpc\NodeState
     */
    public function setIsReachable( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <is_flapping> has a value
     *
     * @return boolean
     */
    public function hasIsFlapping(){
      return $this->_has(6);
    }
    
    /**
     * Clear <is_flapping> value
     *
     * @return \ng_rpc\NodeState
     */
    public function clearIsFlapping(){
      return $this->_clear(6);
    }
    
    /**
     * Get <is_flapping> value
     *
     * @return boolean
     */
    public function getIsFlapping(){
      return $this->_get(6);
    }
    
    /**
     * Set <is_flapping> value
     *
     * @param boolean $value
     * @return \ng_rpc\NodeState
     */
    public function setIsFlapping( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <is_executing> has a value
     *
     * @return boolean
     */
    public function hasIsExecuting(){
      return $this->_has(7);
    }
    
    /**
     * Clear <is_executing> value
     *
     * @return \ng_rpc\NodeState
     */
    public function clearIsExecuting(){
      return $this->_clear(7);
    }
    
    /**
     * Get <is_executing> value
     *
     * @return boolean
     */
    public function getIsExecuting(){
      return $this->_get(7);
    }
    
    /**
     * Set <is_executing> value
     *
     * @param boolean $value
     * @return \ng_rpc\NodeState
     */
    public function setIsExecuting( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <rtt> has a value
     *
     * @return boolean
     */
    public function hasRtt(){
      return $this->_has(8);
    }
    
    /**
     * Clear <rtt> value
     *
     * @return \ng_rpc\NodeState
     */
    public function clearRtt(){
      return $this->_clear(8);
    }
    
    /**
     * Get <rtt> value
     *
     * @return float
     */
    public function getRtt(){
      return $this->_get(8);
    }
    
    /**
     * Set <rtt> value
     *
     * @param float $value
     * @return \ng_rpc\NodeState
     */
    public function setRtt( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <loss> has a value
     *
     * @return boolean
     */
    public function hasLoss(){
      return $this->_has(9);
    }
    
    /**
     * Clear <loss> value
     *
     * @return \ng_rpc\NodeState
     */
    public function clearLoss(){
      return $this->_clear(9);
    }
    
    /**
     * Get <loss> value
     *
     * @return float
     */
    public function getLoss(){
      return $this->_get(9);
    }
    
    /**
     * Set <loss> value
     *
     * @param float $value
     * @return \ng_rpc\NodeState
     */
    public function setLoss( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <time> has a value
     *
     * @return boolean
     */
    public function hasTime(){
      return $this->_has(10);
    }
    
    /**
     * Clear <time> value
     *
     * @return \ng_rpc\NodeState
     */
    public function clearTime(){
      return $this->_clear(10);
    }
    
    /**
     * Get <time> value
     *
     * @return int
     */
    public function getTime(){
      return $this->_get(10);
    }
    
    /**
     * Set <time> value
     *
     * @param int $value
     * @return \ng_rpc\NodeState
     */
    public function setTime( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <source> has a value
     *
     * @return boolean
     */
    public function hasSource(){
      return $this->_has(11);
    }
    
    /**
     * Clear <source> value
     *
     * @return \ng_rpc\NodeState
     */
    public function clearSource(){
      return $this->_clear(11);
    }
    
    /**
     * Get <source> value
     *
     * @return string
     */
    public function getSource(){
      return $this->_get(11);
    }
    
    /**
     * Set <source> value
     *
     * @param string $value
     * @return \ng_rpc\NodeState
     */
    public function setSource( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <output> has a value
     *
     * @return boolean
     */
    public function hasOutput(){
      return $this->_has(12);
    }
    
    /**
     * Clear <output> value
     *
     * @return \ng_rpc\NodeState
     */
    public function clearOutput(){
      return $this->_clear(12);
    }
    
    /**
     * Get <output> value
     *
     * @return string
     */
    public function getOutput(){
      return $this->_get(12);
    }
    
    /**
     * Set <output> value
     *
     * @param string $value
     * @return \ng_rpc\NodeState
     */
    public function setOutput( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <num_services> has a value
     *
     * @return boolean
     */
    public function hasNumServices(){
      return $this->_has(13);
    }
    
    /**
     * Clear <num_services> value
     *
     * @return \ng_rpc\NodeState
     */
    public function clearNumServices(){
      return $this->_clear(13);
    }
    
    /**
     * Get <num_services> value
     *
     * @return int
     */
    public function getNumServices(){
      return $this->_get(13);
    }
    
    /**
     * Set <num_services> value
     *
     * @param int $value
     * @return \ng_rpc\NodeState
     */
    public function setNumServices( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <num_services_ok> has a value
     *
     * @return boolean
     */
    public function hasNumServicesOk(){
      return $this->_has(14);
    }
    
    /**
     * Clear <num_services_ok> value
     *
     * @return \ng_rpc\NodeState
     */
    public function clearNumServicesOk(){
      return $this->_clear(14);
    }
    
    /**
     * Get <num_services_ok> value
     *
     * @return int
     */
    public function getNumServicesOk(){
      return $this->_get(14);
    }
    
    /**
     * Set <num_services_ok> value
     *
     * @param int $value
     * @return \ng_rpc\NodeState
     */
    public function setNumServicesOk( $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <num_services_warning> has a value
     *
     * @return boolean
     */
    public function hasNumServicesWarning(){
      return $this->_has(15);
    }
    
    /**
     * Clear <num_services_warning> value
     *
     * @return \ng_rpc\NodeState
     */
    public function clearNumServicesWarning(){
      return $this->_clear(15);
    }
    
    /**
     * Get <num_services_warning> value
     *
     * @return int
     */
    public function getNumServicesWarning(){
      return $this->_get(15);
    }
    
    /**
     * Set <num_services_warning> value
     *
     * @param int $value
     * @return \ng_rpc\NodeState
     */
    public function setNumServicesWarning( $value){
      return $this->_set(15, $value);
    }
    
    /**
     * Check if <num_services_pending> has a value
     *
     * @return boolean
     */
    public function hasNumServicesPending(){
      return $this->_has(16);
    }
    
    /**
     * Clear <num_services_pending> value
     *
     * @return \ng_rpc\NodeState
     */
    public function clearNumServicesPending(){
      return $this->_clear(16);
    }
    
    /**
     * Get <num_services_pending> value
     *
     * @return int
     */
    public function getNumServicesPending(){
      return $this->_get(16);
    }
    
    /**
     * Set <num_services_pending> value
     *
     * @param int $value
     * @return \ng_rpc\NodeState
     */
    public function setNumServicesPending( $value){
      return $this->_set(16, $value);
    }
    
    /**
     * Check if <num_services_critical> has a value
     *
     * @return boolean
     */
    public function hasNumServicesCritical(){
      return $this->_has(17);
    }
    
    /**
     * Clear <num_services_critical> value
     *
     * @return \ng_rpc\NodeState
     */
    public function clearNumServicesCritical(){
      return $this->_clear(17);
    }
    
    /**
     * Get <num_services_critical> value
     *
     * @return int
     */
    public function getNumServicesCritical(){
      return $this->_get(17);
    }
    
    /**
     * Set <num_services_critical> value
     *
     * @param int $value
     * @return \ng_rpc\NodeState
     */
    public function setNumServicesCritical( $value){
      return $this->_set(17, $value);
    }
    
    /**
     * Check if <num_services_unknown> has a value
     *
     * @return boolean
     */
    public function hasNumServicesUnknown(){
      return $this->_has(18);
    }
    
    /**
     * Clear <num_services_unknown> value
     *
     * @return \ng_rpc\NodeState
     */
    public function clearNumServicesUnknown(){
      return $this->_clear(18);
    }
    
    /**
     * Get <num_services_unknown> value
     *
     * @return int
     */
    public function getNumServicesUnknown(){
      return $this->_get(18);
    }
    
    /**
     * Set <num_services_unknown> value
     *
     * @param int $value
     * @return \ng_rpc\NodeState
     */
    public function setNumServicesUnknown( $value){
      return $this->_set(18, $value);
    }
    
    /**
     * Check if <notes> has a value
     *
     * @return boolean
     */
    public function hasNotes(){
      return $this->_has(19);
    }
    
    /**
     * Clear <notes> value
     *
     * @return \ng_rpc\NodeState
     */
    public function clearNotes(){
      return $this->_clear(19);
    }
    
    /**
     * Get <notes> value
     *
     * @return string
     */
    public function getNotes(){
      return $this->_get(19);
    }
    
    /**
     * Set <notes> value
     *
     * @param string $value
     * @return \ng_rpc\NodeState
     */
    public function setNotes( $value){
      return $this->_set(19, $value);
    }
    
    /**
     * Check if <is_duplicate> has a value
     *
     * @return boolean
     */
    public function hasIsDuplicate(){
      return $this->_has(20);
    }
    
    /**
     * Clear <is_duplicate> value
     *
     * @return \ng_rpc\NodeState
     */
    public function clearIsDuplicate(){
      return $this->_clear(20);
    }
    
    /**
     * Get <is_duplicate> value
     *
     * @return boolean
     */
    public function getIsDuplicate(){
      return $this->_get(20);
    }
    
    /**
     * Set <is_duplicate> value
     *
     * @param boolean $value
     * @return \ng_rpc\NodeState
     */
    public function setIsDuplicate( $value){
      return $this->_set(20, $value);
    }
    
    /**
     * Check if <has_been_checked> has a value
     *
     * @return boolean
     */
    public function hasHasBeenChecked(){
      return $this->_has(21);
    }
    
    /**
     * Clear <has_been_checked> value
     *
     * @return \ng_rpc\NodeState
     */
    public function clearHasBeenChecked(){
      return $this->_clear(21);
    }
    
    /**
     * Get <has_been_checked> value
     *
     * @return boolean
     */
    public function getHasBeenChecked(){
      return $this->_get(21);
    }
    
    /**
     * Set <has_been_checked> value
     *
     * @param boolean $value
     * @return \ng_rpc\NodeState
     */
    public function setHasBeenChecked( $value){
      return $this->_set(21, $value);
    }
  }
}

namespace ng_rpc {

  class BackendClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts) {
      parent::__construct($hostname, $opts);
    }
    /**
     * @param ng_rpc\NodeByIdRequest $input
     */
    public function GetNodeById(\ng_rpc\NodeByIdRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/ng_rpc.Backend/GetNodeById', $argument, '\ng_rpc\Node::deserialize', $metadata, $options);
    }
    /**
     * @param ng_rpc\NodesAllRequest $input
     */
    public function GetAllNodes($argument, $metadata = array(), $options = array()) {
      return $this->_serverStreamRequest('/ng_rpc.Backend/GetAllNodes', $argument, '\ng_rpc\Node::deserialize', $metadata, $options);
    }
    /**
     * @param ng_rpc\LinkByIdRequest $input
     */
    public function GetLinkById(\ng_rpc\LinkByIdRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/ng_rpc.Backend/GetLinkById', $argument, '\ng_rpc\Link::deserialize', $metadata, $options);
    }
    /**
     * @param ng_rpc\LinksAllRequest $input
     */
    public function GetAllLinks($argument, $metadata = array(), $options = array()) {
      return $this->_serverStreamRequest('/ng_rpc.Backend/GetAllLinks', $argument, '\ng_rpc\Link::deserialize', $metadata, $options);
    }
    /**
     * @param ng_rpc\AllMetricsRequest $input
     */
    public function GetAllMetrics($argument, $metadata = array(), $options = array()) {
      return $this->_serverStreamRequest('/ng_rpc.Backend/GetAllMetrics', $argument, '\ng_rpc\Metric::deserialize', $metadata, $options);
    }
    /**
     * @param ng_rpc\StatusRequest $input
     */
    public function GetStatus(\ng_rpc\StatusRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/ng_rpc.Backend/GetStatus', $argument, '\ng_rpc\StatusResponse::deserialize', $metadata, $options);
    }
  }
}
