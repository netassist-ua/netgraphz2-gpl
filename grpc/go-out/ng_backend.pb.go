// Code generated by protoc-gen-go.
// source: ng_backend.proto
// DO NOT EDIT!

/*
Package ng_rpc is a generated protocol buffer package.

It is generated from these files:
	ng_backend.proto

It has these top-level messages:
	AllMetricsRequest
	Metric
	StatusRequest
	StatusResponse
	LinkByIdRequest
	LinksAllRequest
	NodeByIdRequest
	NodesAllRequest
	Link
	MetricVal
	Node
	MetricValCollection
	NodeState
*/
package ng_rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type Metric_Kind int32

const (
	Metric_GAUGE   Metric_Kind = 1
	Metric_DERIVE  Metric_Kind = 2
	Metric_COUNTER Metric_Kind = 3
	Metric_OTHER   Metric_Kind = 4
)

var Metric_Kind_name = map[int32]string{
	1: "GAUGE",
	2: "DERIVE",
	3: "COUNTER",
	4: "OTHER",
}
var Metric_Kind_value = map[string]int32{
	"GAUGE":   1,
	"DERIVE":  2,
	"COUNTER": 3,
	"OTHER":   4,
}

func (x Metric_Kind) Enum() *Metric_Kind {
	p := new(Metric_Kind)
	*p = x
	return p
}
func (x Metric_Kind) String() string {
	return proto.EnumName(Metric_Kind_name, int32(x))
}
func (x *Metric_Kind) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Metric_Kind_value, data, "Metric_Kind")
	if err != nil {
		return err
	}
	*x = Metric_Kind(value)
	return nil
}
func (Metric_Kind) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type Link_LinkType int32

const (
	Link_FIBER            Link_LinkType = 0
	Link_FIBER_TRANSPORT  Link_LinkType = 1
	Link_COPPER           Link_LinkType = 2
	Link_RADIO_WB         Link_LinkType = 3
	Link_RADIO_80211_2GHZ Link_LinkType = 4
	Link_RADIO_80211_5GHZ Link_LinkType = 5
	Link_RADIO_LB         Link_LinkType = 6
	Link_GSM              Link_LinkType = 7
	Link_X25              Link_LinkType = 8
	Link_POWERLINE        Link_LinkType = 9
)

var Link_LinkType_name = map[int32]string{
	0: "FIBER",
	1: "FIBER_TRANSPORT",
	2: "COPPER",
	3: "RADIO_WB",
	4: "RADIO_80211_2GHZ",
	5: "RADIO_80211_5GHZ",
	6: "RADIO_LB",
	7: "GSM",
	8: "X25",
	9: "POWERLINE",
}
var Link_LinkType_value = map[string]int32{
	"FIBER":            0,
	"FIBER_TRANSPORT":  1,
	"COPPER":           2,
	"RADIO_WB":         3,
	"RADIO_80211_2GHZ": 4,
	"RADIO_80211_5GHZ": 5,
	"RADIO_LB":         6,
	"GSM":              7,
	"X25":              8,
	"POWERLINE":        9,
}

func (x Link_LinkType) Enum() *Link_LinkType {
	p := new(Link_LinkType)
	*p = x
	return p
}
func (x Link_LinkType) String() string {
	return proto.EnumName(Link_LinkType_name, int32(x))
}
func (x *Link_LinkType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Link_LinkType_value, data, "Link_LinkType")
	if err != nil {
		return err
	}
	*x = Link_LinkType(value)
	return nil
}
func (Link_LinkType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{8, 0} }

type MetricVal_Kind int32

const (
	MetricVal_GAUGE   MetricVal_Kind = 1
	MetricVal_DERIVE  MetricVal_Kind = 2
	MetricVal_COUNTER MetricVal_Kind = 3
	MetricVal_OTHER   MetricVal_Kind = 4
)

var MetricVal_Kind_name = map[int32]string{
	1: "GAUGE",
	2: "DERIVE",
	3: "COUNTER",
	4: "OTHER",
}
var MetricVal_Kind_value = map[string]int32{
	"GAUGE":   1,
	"DERIVE":  2,
	"COUNTER": 3,
	"OTHER":   4,
}

func (x MetricVal_Kind) Enum() *MetricVal_Kind {
	p := new(MetricVal_Kind)
	*p = x
	return p
}
func (x MetricVal_Kind) String() string {
	return proto.EnumName(MetricVal_Kind_name, int32(x))
}
func (x *MetricVal_Kind) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MetricVal_Kind_value, data, "MetricVal_Kind")
	if err != nil {
		return err
	}
	*x = MetricVal_Kind(value)
	return nil
}
func (MetricVal_Kind) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{9, 0} }

type Node_NodeType int32

const (
	Node_SW              Node_NodeType = 0
	Node_SERVER          Node_NodeType = 1
	Node_ROUTER          Node_NodeType = 2
	Node_TRANSPORT       Node_NodeType = 3
	Node_WIRELESS_AP     Node_NodeType = 4
	Node_WIRELESS_BRIDGE Node_NodeType = 5
	Node_OTHER           Node_NodeType = 6
)

var Node_NodeType_name = map[int32]string{
	0: "SW",
	1: "SERVER",
	2: "ROUTER",
	3: "TRANSPORT",
	4: "WIRELESS_AP",
	5: "WIRELESS_BRIDGE",
	6: "OTHER",
}
var Node_NodeType_value = map[string]int32{
	"SW":              0,
	"SERVER":          1,
	"ROUTER":          2,
	"TRANSPORT":       3,
	"WIRELESS_AP":     4,
	"WIRELESS_BRIDGE": 5,
	"OTHER":           6,
}

func (x Node_NodeType) Enum() *Node_NodeType {
	p := new(Node_NodeType)
	*p = x
	return p
}
func (x Node_NodeType) String() string {
	return proto.EnumName(Node_NodeType_name, int32(x))
}
func (x *Node_NodeType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Node_NodeType_value, data, "Node_NodeType")
	if err != nil {
		return err
	}
	*x = Node_NodeType(value)
	return nil
}
func (Node_NodeType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{10, 0} }

type NodeState_State int32

const (
	NodeState_STATE_UP          NodeState_State = 0
	NodeState_STATE_DOWN        NodeState_State = 1
	NodeState_STATE_UNREACHABLE NodeState_State = 2
)

var NodeState_State_name = map[int32]string{
	0: "STATE_UP",
	1: "STATE_DOWN",
	2: "STATE_UNREACHABLE",
}
var NodeState_State_value = map[string]int32{
	"STATE_UP":          0,
	"STATE_DOWN":        1,
	"STATE_UNREACHABLE": 2,
}

func (x NodeState_State) Enum() *NodeState_State {
	p := new(NodeState_State)
	*p = x
	return p
}
func (x NodeState_State) String() string {
	return proto.EnumName(NodeState_State_name, int32(x))
}
func (x *NodeState_State) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NodeState_State_value, data, "NodeState_State")
	if err != nil {
		return err
	}
	*x = NodeState_State(value)
	return nil
}
func (NodeState_State) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{12, 0} }

type NodeState_DescState int32

const (
	NodeState_D_STATE_UP       NodeState_DescState = 0
	NodeState_D_STATE_DOWN     NodeState_DescState = 1
	NodeState_D_STATE_WARNING  NodeState_DescState = 2
	NodeState_D_STATE_UNKNOWN  NodeState_DescState = 3
	NodeState_D_STATE_FLAPPING NodeState_DescState = 4
)

var NodeState_DescState_name = map[int32]string{
	0: "D_STATE_UP",
	1: "D_STATE_DOWN",
	2: "D_STATE_WARNING",
	3: "D_STATE_UNKNOWN",
	4: "D_STATE_FLAPPING",
}
var NodeState_DescState_value = map[string]int32{
	"D_STATE_UP":       0,
	"D_STATE_DOWN":     1,
	"D_STATE_WARNING":  2,
	"D_STATE_UNKNOWN":  3,
	"D_STATE_FLAPPING": 4,
}

func (x NodeState_DescState) Enum() *NodeState_DescState {
	p := new(NodeState_DescState)
	*p = x
	return p
}
func (x NodeState_DescState) String() string {
	return proto.EnumName(NodeState_DescState_name, int32(x))
}
func (x *NodeState_DescState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NodeState_DescState_value, data, "NodeState_DescState")
	if err != nil {
		return err
	}
	*x = NodeState_DescState(value)
	return nil
}
func (NodeState_DescState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{12, 1} }

type AllMetricsRequest struct {
	NSkip            *int64  `protobuf:"varint,1,req,name=n_skip" json:"n_skip,omitempty"`
	NTake            *int64  `protobuf:"varint,2,req,name=n_take" json:"n_take,omitempty"`
	FilterHostName   *bool   `protobuf:"varint,3,req,name=filter_host_name" json:"filter_host_name,omitempty"`
	HostName         *string `protobuf:"bytes,10,opt,name=host_name" json:"host_name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AllMetricsRequest) Reset()                    { *m = AllMetricsRequest{} }
func (m *AllMetricsRequest) String() string            { return proto.CompactTextString(m) }
func (*AllMetricsRequest) ProtoMessage()               {}
func (*AllMetricsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AllMetricsRequest) GetNSkip() int64 {
	if m != nil && m.NSkip != nil {
		return *m.NSkip
	}
	return 0
}

func (m *AllMetricsRequest) GetNTake() int64 {
	if m != nil && m.NTake != nil {
		return *m.NTake
	}
	return 0
}

func (m *AllMetricsRequest) GetFilterHostName() bool {
	if m != nil && m.FilterHostName != nil {
		return *m.FilterHostName
	}
	return false
}

func (m *AllMetricsRequest) GetHostName() string {
	if m != nil && m.HostName != nil {
		return *m.HostName
	}
	return ""
}

type Metric struct {
	Name             *string      `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Kind             *Metric_Kind `protobuf:"varint,2,req,name=kind,enum=ng_rpc.Metric_Kind" json:"kind,omitempty"`
	NRecords         *int64       `protobuf:"varint,3,req,name=n_records" json:"n_records,omitempty"`
	TimeLastRecord   *int64       `protobuf:"varint,4,req,name=time_last_record" json:"time_last_record,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Metric) Reset()                    { *m = Metric{} }
func (m *Metric) String() string            { return proto.CompactTextString(m) }
func (*Metric) ProtoMessage()               {}
func (*Metric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Metric) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Metric) GetKind() Metric_Kind {
	if m != nil && m.Kind != nil {
		return *m.Kind
	}
	return Metric_GAUGE
}

func (m *Metric) GetNRecords() int64 {
	if m != nil && m.NRecords != nil {
		return *m.NRecords
	}
	return 0
}

func (m *Metric) GetTimeLastRecord() int64 {
	if m != nil && m.TimeLastRecord != nil {
		return *m.TimeLastRecord
	}
	return 0
}

type StatusRequest struct {
	Time             *int64 `protobuf:"varint,1,req,name=time" json:"time,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *StatusRequest) Reset()                    { *m = StatusRequest{} }
func (m *StatusRequest) String() string            { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()               {}
func (*StatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *StatusRequest) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

type StatusResponse struct {
	NNodes           *int32 `protobuf:"varint,1,req,name=n_nodes" json:"n_nodes,omitempty"`
	NLinks           *int32 `protobuf:"varint,2,req,name=n_links" json:"n_links,omitempty"`
	NMetrics         *int32 `protobuf:"varint,3,req,name=n_metrics" json:"n_metrics,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *StatusResponse) Reset()                    { *m = StatusResponse{} }
func (m *StatusResponse) String() string            { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()               {}
func (*StatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *StatusResponse) GetNNodes() int32 {
	if m != nil && m.NNodes != nil {
		return *m.NNodes
	}
	return 0
}

func (m *StatusResponse) GetNLinks() int32 {
	if m != nil && m.NLinks != nil {
		return *m.NLinks
	}
	return 0
}

func (m *StatusResponse) GetNMetrics() int32 {
	if m != nil && m.NMetrics != nil {
		return *m.NMetrics
	}
	return 0
}

type LinkByIdRequest struct {
	LinkId           *int32 `protobuf:"varint,1,req,name=link_id" json:"link_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *LinkByIdRequest) Reset()                    { *m = LinkByIdRequest{} }
func (m *LinkByIdRequest) String() string            { return proto.CompactTextString(m) }
func (*LinkByIdRequest) ProtoMessage()               {}
func (*LinkByIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *LinkByIdRequest) GetLinkId() int32 {
	if m != nil && m.LinkId != nil {
		return *m.LinkId
	}
	return 0
}

type LinksAllRequest struct {
	LastId           *int32 `protobuf:"varint,1,req,name=last_id" json:"last_id,omitempty"`
	NTake            *int32 `protobuf:"varint,2,req,name=n_take" json:"n_take,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *LinksAllRequest) Reset()                    { *m = LinksAllRequest{} }
func (m *LinksAllRequest) String() string            { return proto.CompactTextString(m) }
func (*LinksAllRequest) ProtoMessage()               {}
func (*LinksAllRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *LinksAllRequest) GetLastId() int32 {
	if m != nil && m.LastId != nil {
		return *m.LastId
	}
	return 0
}

func (m *LinksAllRequest) GetNTake() int32 {
	if m != nil && m.NTake != nil {
		return *m.NTake
	}
	return 0
}

type NodeByIdRequest struct {
	NodeId           *int32 `protobuf:"varint,1,req,name=node_id" json:"node_id,omitempty"`
	IncludeState     *bool  `protobuf:"varint,2,req,name=include_state" json:"include_state,omitempty"`
	IncludeMetrics   *int32 `protobuf:"varint,3,req,name=include_metrics" json:"include_metrics,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *NodeByIdRequest) Reset()                    { *m = NodeByIdRequest{} }
func (m *NodeByIdRequest) String() string            { return proto.CompactTextString(m) }
func (*NodeByIdRequest) ProtoMessage()               {}
func (*NodeByIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *NodeByIdRequest) GetNodeId() int32 {
	if m != nil && m.NodeId != nil {
		return *m.NodeId
	}
	return 0
}

func (m *NodeByIdRequest) GetIncludeState() bool {
	if m != nil && m.IncludeState != nil {
		return *m.IncludeState
	}
	return false
}

func (m *NodeByIdRequest) GetIncludeMetrics() int32 {
	if m != nil && m.IncludeMetrics != nil {
		return *m.IncludeMetrics
	}
	return 0
}

type NodesAllRequest struct {
	LastId             *int32 `protobuf:"varint,1,req,name=last_id" json:"last_id,omitempty"`
	NTake              *int32 `protobuf:"varint,2,req,name=n_take" json:"n_take,omitempty"`
	IncludeState       *bool  `protobuf:"varint,3,req,name=include_state" json:"include_state,omitempty"`
	IncludeLastMetrics *int32 `protobuf:"varint,4,req,name=include_last_metrics" json:"include_last_metrics,omitempty"`
	XXX_unrecognized   []byte `json:"-"`
}

func (m *NodesAllRequest) Reset()                    { *m = NodesAllRequest{} }
func (m *NodesAllRequest) String() string            { return proto.CompactTextString(m) }
func (*NodesAllRequest) ProtoMessage()               {}
func (*NodesAllRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *NodesAllRequest) GetLastId() int32 {
	if m != nil && m.LastId != nil {
		return *m.LastId
	}
	return 0
}

func (m *NodesAllRequest) GetNTake() int32 {
	if m != nil && m.NTake != nil {
		return *m.NTake
	}
	return 0
}

func (m *NodesAllRequest) GetIncludeState() bool {
	if m != nil && m.IncludeState != nil {
		return *m.IncludeState
	}
	return false
}

func (m *NodesAllRequest) GetIncludeLastMetrics() int32 {
	if m != nil && m.IncludeLastMetrics != nil {
		return *m.IncludeLastMetrics
	}
	return 0
}

type Link struct {
	Id               *int32         `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	StartNodeId      *int32         `protobuf:"varint,2,req,name=start_node_id" json:"start_node_id,omitempty"`
	EndNodeId        *int32         `protobuf:"varint,3,req,name=end_node_id" json:"end_node_id,omitempty"`
	DbStartId        *int32         `protobuf:"varint,4,opt,name=db_start_id" json:"db_start_id,omitempty"`
	DbEndId          *int32         `protobuf:"varint,5,opt,name=db_end_id" json:"db_end_id,omitempty"`
	Quality          *int32         `protobuf:"varint,6,opt,name=quality" json:"quality,omitempty"`
	Comment          *string        `protobuf:"bytes,7,opt,name=comment" json:"comment,omitempty"`
	Type             *Link_LinkType `protobuf:"varint,8,opt,name=type,enum=ng_rpc.Link_LinkType" json:"type,omitempty"`
	RxOctetsMetric   *string        `protobuf:"bytes,9,opt,name=rx_octets_metric" json:"rx_octets_metric,omitempty"`
	TxOctetsMetric   *string        `protobuf:"bytes,10,opt,name=tx_octets_metric" json:"tx_octets_metric,omitempty"`
	CapacityMbit     *int32         `protobuf:"varint,11,opt,name=capacity_mbit" json:"capacity_mbit,omitempty"`
	SrcSwPort        *int32         `protobuf:"varint,12,opt,name=src_sw_port" json:"src_sw_port,omitempty"`
	DstSwPort        *int32         `protobuf:"varint,13,opt,name=dst_sw_port" json:"dst_sw_port,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *Link) Reset()                    { *m = Link{} }
func (m *Link) String() string            { return proto.CompactTextString(m) }
func (*Link) ProtoMessage()               {}
func (*Link) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Link) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Link) GetStartNodeId() int32 {
	if m != nil && m.StartNodeId != nil {
		return *m.StartNodeId
	}
	return 0
}

func (m *Link) GetEndNodeId() int32 {
	if m != nil && m.EndNodeId != nil {
		return *m.EndNodeId
	}
	return 0
}

func (m *Link) GetDbStartId() int32 {
	if m != nil && m.DbStartId != nil {
		return *m.DbStartId
	}
	return 0
}

func (m *Link) GetDbEndId() int32 {
	if m != nil && m.DbEndId != nil {
		return *m.DbEndId
	}
	return 0
}

func (m *Link) GetQuality() int32 {
	if m != nil && m.Quality != nil {
		return *m.Quality
	}
	return 0
}

func (m *Link) GetComment() string {
	if m != nil && m.Comment != nil {
		return *m.Comment
	}
	return ""
}

func (m *Link) GetType() Link_LinkType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Link_FIBER
}

func (m *Link) GetRxOctetsMetric() string {
	if m != nil && m.RxOctetsMetric != nil {
		return *m.RxOctetsMetric
	}
	return ""
}

func (m *Link) GetTxOctetsMetric() string {
	if m != nil && m.TxOctetsMetric != nil {
		return *m.TxOctetsMetric
	}
	return ""
}

func (m *Link) GetCapacityMbit() int32 {
	if m != nil && m.CapacityMbit != nil {
		return *m.CapacityMbit
	}
	return 0
}

func (m *Link) GetSrcSwPort() int32 {
	if m != nil && m.SrcSwPort != nil {
		return *m.SrcSwPort
	}
	return 0
}

func (m *Link) GetDstSwPort() int32 {
	if m != nil && m.DstSwPort != nil {
		return *m.DstSwPort
	}
	return 0
}

type MetricVal struct {
	Name             *string         `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Type             *string         `protobuf:"bytes,2,req,name=type" json:"type,omitempty"`
	Kind             *MetricVal_Kind `protobuf:"varint,3,req,name=kind,enum=ng_rpc.MetricVal_Kind" json:"kind,omitempty"`
	Time             *uint64         `protobuf:"varint,4,req,name=time" json:"time,omitempty"`
	GaugeValue       *float32        `protobuf:"fixed32,5,opt,name=gauge_value" json:"gauge_value,omitempty"`
	DeriveValue      *int64          `protobuf:"varint,6,opt,name=derive_value" json:"derive_value,omitempty"`
	CounterValue     *uint64         `protobuf:"fixed64,7,opt,name=counter_value" json:"counter_value,omitempty"`
	OtherValue       []byte          `protobuf:"bytes,8,opt,name=other_value" json:"other_value,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *MetricVal) Reset()                    { *m = MetricVal{} }
func (m *MetricVal) String() string            { return proto.CompactTextString(m) }
func (*MetricVal) ProtoMessage()               {}
func (*MetricVal) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *MetricVal) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *MetricVal) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *MetricVal) GetKind() MetricVal_Kind {
	if m != nil && m.Kind != nil {
		return *m.Kind
	}
	return MetricVal_GAUGE
}

func (m *MetricVal) GetTime() uint64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *MetricVal) GetGaugeValue() float32 {
	if m != nil && m.GaugeValue != nil {
		return *m.GaugeValue
	}
	return 0
}

func (m *MetricVal) GetDeriveValue() int64 {
	if m != nil && m.DeriveValue != nil {
		return *m.DeriveValue
	}
	return 0
}

func (m *MetricVal) GetCounterValue() uint64 {
	if m != nil && m.CounterValue != nil {
		return *m.CounterValue
	}
	return 0
}

func (m *MetricVal) GetOtherValue() []byte {
	if m != nil {
		return m.OtherValue
	}
	return nil
}

type Node struct {
	Id               *int32                          `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Name             *string                         `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	Address          *string                         `protobuf:"bytes,3,opt,name=address" json:"address,omitempty"`
	Model            *string                         `protobuf:"bytes,4,opt,name=model" json:"model,omitempty"`
	MacAddress       *string                         `protobuf:"bytes,5,opt,name=mac_address" json:"mac_address,omitempty"`
	Ip4              *uint32                         `protobuf:"varint,6,opt,name=ip4" json:"ip4,omitempty"`
	Ip6              []byte                          `protobuf:"bytes,7,opt,name=ip6" json:"ip6,omitempty"`
	Comment          *string                         `protobuf:"bytes,8,opt,name=comment" json:"comment,omitempty"`
	DbId             *int32                          `protobuf:"varint,9,opt,name=db_id" json:"db_id,omitempty"`
	NumPorts         *uint32                         `protobuf:"fixed32,10,opt,name=num_ports" json:"num_ports,omitempty"`
	IcingaName       *string                         `protobuf:"bytes,11,opt,name=icinga_name" json:"icinga_name,omitempty"`
	Serial           *string                         `protobuf:"bytes,12,opt,name=serial" json:"serial,omitempty"`
	States           []*NodeState                    `protobuf:"bytes,13,rep,name=states" json:"states,omitempty"`
	LastMetricValues map[string]*MetricValCollection `protobuf:"bytes,14,rep,name=last_metric_values" json:"last_metric_values,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Type             *Node_NodeType                  `protobuf:"varint,15,opt,name=type,enum=ng_rpc.Node_NodeType" json:"type,omitempty"`
	XXX_unrecognized []byte                          `json:"-"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Node) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Node) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Node) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

func (m *Node) GetModel() string {
	if m != nil && m.Model != nil {
		return *m.Model
	}
	return ""
}

func (m *Node) GetMacAddress() string {
	if m != nil && m.MacAddress != nil {
		return *m.MacAddress
	}
	return ""
}

func (m *Node) GetIp4() uint32 {
	if m != nil && m.Ip4 != nil {
		return *m.Ip4
	}
	return 0
}

func (m *Node) GetIp6() []byte {
	if m != nil {
		return m.Ip6
	}
	return nil
}

func (m *Node) GetComment() string {
	if m != nil && m.Comment != nil {
		return *m.Comment
	}
	return ""
}

func (m *Node) GetDbId() int32 {
	if m != nil && m.DbId != nil {
		return *m.DbId
	}
	return 0
}

func (m *Node) GetNumPorts() uint32 {
	if m != nil && m.NumPorts != nil {
		return *m.NumPorts
	}
	return 0
}

func (m *Node) GetIcingaName() string {
	if m != nil && m.IcingaName != nil {
		return *m.IcingaName
	}
	return ""
}

func (m *Node) GetSerial() string {
	if m != nil && m.Serial != nil {
		return *m.Serial
	}
	return ""
}

func (m *Node) GetStates() []*NodeState {
	if m != nil {
		return m.States
	}
	return nil
}

func (m *Node) GetLastMetricValues() map[string]*MetricValCollection {
	if m != nil {
		return m.LastMetricValues
	}
	return nil
}

func (m *Node) GetType() Node_NodeType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Node_SW
}

type MetricValCollection struct {
	Name             *string      `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	Values           []*MetricVal `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *MetricValCollection) Reset()                    { *m = MetricValCollection{} }
func (m *MetricValCollection) String() string            { return proto.CompactTextString(m) }
func (*MetricValCollection) ProtoMessage()               {}
func (*MetricValCollection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *MetricValCollection) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *MetricValCollection) GetValues() []*MetricVal {
	if m != nil {
		return m.Values
	}
	return nil
}

type NodeState struct {
	State               *NodeState_State     `protobuf:"varint,1,req,name=state,enum=ng_rpc.NodeState_State" json:"state,omitempty"`
	HardState           *NodeState_State     `protobuf:"varint,2,req,name=hard_state,enum=ng_rpc.NodeState_State" json:"hard_state,omitempty"`
	DescriptiveState    *NodeState_DescState `protobuf:"varint,3,req,name=descriptive_state,enum=ng_rpc.NodeState_DescState" json:"descriptive_state,omitempty"`
	IsHardState         *bool                `protobuf:"varint,4,req,name=is_hard_state" json:"is_hard_state,omitempty"`
	IsReachable         *bool                `protobuf:"varint,5,req,name=is_reachable" json:"is_reachable,omitempty"`
	IsFlapping          *bool                `protobuf:"varint,6,req,name=is_flapping" json:"is_flapping,omitempty"`
	IsExecuting         *bool                `protobuf:"varint,7,req,name=is_executing" json:"is_executing,omitempty"`
	Rtt                 *float32             `protobuf:"fixed32,8,req,name=rtt" json:"rtt,omitempty"`
	Loss                *float32             `protobuf:"fixed32,9,req,name=loss" json:"loss,omitempty"`
	Time                *uint64              `protobuf:"varint,10,req,name=time" json:"time,omitempty"`
	Source              *string              `protobuf:"bytes,11,req,name=source" json:"source,omitempty"`
	Output              *string              `protobuf:"bytes,12,req,name=output" json:"output,omitempty"`
	NumServices         *int32               `protobuf:"varint,13,req,name=num_services" json:"num_services,omitempty"`
	NumServicesOk       *int32               `protobuf:"varint,14,req,name=num_services_ok" json:"num_services_ok,omitempty"`
	NumServicesWarning  *int32               `protobuf:"varint,15,req,name=num_services_warning" json:"num_services_warning,omitempty"`
	NumServicesPending  *int32               `protobuf:"varint,16,req,name=num_services_pending" json:"num_services_pending,omitempty"`
	NumServicesCritical *int32               `protobuf:"varint,17,req,name=num_services_critical" json:"num_services_critical,omitempty"`
	NumServicesUnknown  *int32               `protobuf:"varint,18,req,name=num_services_unknown" json:"num_services_unknown,omitempty"`
	Notes               *string              `protobuf:"bytes,19,req,name=notes" json:"notes,omitempty"`
	IsDuplicate         *bool                `protobuf:"varint,20,req,name=is_duplicate" json:"is_duplicate,omitempty"`
	HasBeenChecked      *bool                `protobuf:"varint,21,req,name=has_been_checked" json:"has_been_checked,omitempty"`
	XXX_unrecognized    []byte               `json:"-"`
}

func (m *NodeState) Reset()                    { *m = NodeState{} }
func (m *NodeState) String() string            { return proto.CompactTextString(m) }
func (*NodeState) ProtoMessage()               {}
func (*NodeState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *NodeState) GetState() NodeState_State {
	if m != nil && m.State != nil {
		return *m.State
	}
	return NodeState_STATE_UP
}

func (m *NodeState) GetHardState() NodeState_State {
	if m != nil && m.HardState != nil {
		return *m.HardState
	}
	return NodeState_STATE_UP
}

func (m *NodeState) GetDescriptiveState() NodeState_DescState {
	if m != nil && m.DescriptiveState != nil {
		return *m.DescriptiveState
	}
	return NodeState_D_STATE_UP
}

func (m *NodeState) GetIsHardState() bool {
	if m != nil && m.IsHardState != nil {
		return *m.IsHardState
	}
	return false
}

func (m *NodeState) GetIsReachable() bool {
	if m != nil && m.IsReachable != nil {
		return *m.IsReachable
	}
	return false
}

func (m *NodeState) GetIsFlapping() bool {
	if m != nil && m.IsFlapping != nil {
		return *m.IsFlapping
	}
	return false
}

func (m *NodeState) GetIsExecuting() bool {
	if m != nil && m.IsExecuting != nil {
		return *m.IsExecuting
	}
	return false
}

func (m *NodeState) GetRtt() float32 {
	if m != nil && m.Rtt != nil {
		return *m.Rtt
	}
	return 0
}

func (m *NodeState) GetLoss() float32 {
	if m != nil && m.Loss != nil {
		return *m.Loss
	}
	return 0
}

func (m *NodeState) GetTime() uint64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *NodeState) GetSource() string {
	if m != nil && m.Source != nil {
		return *m.Source
	}
	return ""
}

func (m *NodeState) GetOutput() string {
	if m != nil && m.Output != nil {
		return *m.Output
	}
	return ""
}

func (m *NodeState) GetNumServices() int32 {
	if m != nil && m.NumServices != nil {
		return *m.NumServices
	}
	return 0
}

func (m *NodeState) GetNumServicesOk() int32 {
	if m != nil && m.NumServicesOk != nil {
		return *m.NumServicesOk
	}
	return 0
}

func (m *NodeState) GetNumServicesWarning() int32 {
	if m != nil && m.NumServicesWarning != nil {
		return *m.NumServicesWarning
	}
	return 0
}

func (m *NodeState) GetNumServicesPending() int32 {
	if m != nil && m.NumServicesPending != nil {
		return *m.NumServicesPending
	}
	return 0
}

func (m *NodeState) GetNumServicesCritical() int32 {
	if m != nil && m.NumServicesCritical != nil {
		return *m.NumServicesCritical
	}
	return 0
}

func (m *NodeState) GetNumServicesUnknown() int32 {
	if m != nil && m.NumServicesUnknown != nil {
		return *m.NumServicesUnknown
	}
	return 0
}

func (m *NodeState) GetNotes() string {
	if m != nil && m.Notes != nil {
		return *m.Notes
	}
	return ""
}

func (m *NodeState) GetIsDuplicate() bool {
	if m != nil && m.IsDuplicate != nil {
		return *m.IsDuplicate
	}
	return false
}

func (m *NodeState) GetHasBeenChecked() bool {
	if m != nil && m.HasBeenChecked != nil {
		return *m.HasBeenChecked
	}
	return false
}

func init() {
	proto.RegisterType((*AllMetricsRequest)(nil), "ng_rpc.AllMetricsRequest")
	proto.RegisterType((*Metric)(nil), "ng_rpc.Metric")
	proto.RegisterType((*StatusRequest)(nil), "ng_rpc.StatusRequest")
	proto.RegisterType((*StatusResponse)(nil), "ng_rpc.StatusResponse")
	proto.RegisterType((*LinkByIdRequest)(nil), "ng_rpc.LinkByIdRequest")
	proto.RegisterType((*LinksAllRequest)(nil), "ng_rpc.LinksAllRequest")
	proto.RegisterType((*NodeByIdRequest)(nil), "ng_rpc.NodeByIdRequest")
	proto.RegisterType((*NodesAllRequest)(nil), "ng_rpc.NodesAllRequest")
	proto.RegisterType((*Link)(nil), "ng_rpc.Link")
	proto.RegisterType((*MetricVal)(nil), "ng_rpc.MetricVal")
	proto.RegisterType((*Node)(nil), "ng_rpc.Node")
	proto.RegisterType((*MetricValCollection)(nil), "ng_rpc.MetricValCollection")
	proto.RegisterType((*NodeState)(nil), "ng_rpc.NodeState")
	proto.RegisterEnum("ng_rpc.Metric_Kind", Metric_Kind_name, Metric_Kind_value)
	proto.RegisterEnum("ng_rpc.Link_LinkType", Link_LinkType_name, Link_LinkType_value)
	proto.RegisterEnum("ng_rpc.MetricVal_Kind", MetricVal_Kind_name, MetricVal_Kind_value)
	proto.RegisterEnum("ng_rpc.Node_NodeType", Node_NodeType_name, Node_NodeType_value)
	proto.RegisterEnum("ng_rpc.NodeState_State", NodeState_State_name, NodeState_State_value)
	proto.RegisterEnum("ng_rpc.NodeState_DescState", NodeState_DescState_name, NodeState_DescState_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Backend service

type BackendClient interface {
	GetNodeById(ctx context.Context, in *NodeByIdRequest, opts ...grpc.CallOption) (*Node, error)
	GetAllNodes(ctx context.Context, in *NodesAllRequest, opts ...grpc.CallOption) (Backend_GetAllNodesClient, error)
	GetLinkById(ctx context.Context, in *LinkByIdRequest, opts ...grpc.CallOption) (*Link, error)
	GetAllLinks(ctx context.Context, in *LinksAllRequest, opts ...grpc.CallOption) (Backend_GetAllLinksClient, error)
	GetAllMetrics(ctx context.Context, in *AllMetricsRequest, opts ...grpc.CallOption) (Backend_GetAllMetricsClient, error)
	GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type backendClient struct {
	cc *grpc.ClientConn
}

func NewBackendClient(cc *grpc.ClientConn) BackendClient {
	return &backendClient{cc}
}

func (c *backendClient) GetNodeById(ctx context.Context, in *NodeByIdRequest, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := grpc.Invoke(ctx, "/ng_rpc.Backend/GetNodeById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) GetAllNodes(ctx context.Context, in *NodesAllRequest, opts ...grpc.CallOption) (Backend_GetAllNodesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Backend_serviceDesc.Streams[0], c.cc, "/ng_rpc.Backend/GetAllNodes", opts...)
	if err != nil {
		return nil, err
	}
	x := &backendGetAllNodesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Backend_GetAllNodesClient interface {
	Recv() (*Node, error)
	grpc.ClientStream
}

type backendGetAllNodesClient struct {
	grpc.ClientStream
}

func (x *backendGetAllNodesClient) Recv() (*Node, error) {
	m := new(Node)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *backendClient) GetLinkById(ctx context.Context, in *LinkByIdRequest, opts ...grpc.CallOption) (*Link, error) {
	out := new(Link)
	err := grpc.Invoke(ctx, "/ng_rpc.Backend/GetLinkById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) GetAllLinks(ctx context.Context, in *LinksAllRequest, opts ...grpc.CallOption) (Backend_GetAllLinksClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Backend_serviceDesc.Streams[1], c.cc, "/ng_rpc.Backend/GetAllLinks", opts...)
	if err != nil {
		return nil, err
	}
	x := &backendGetAllLinksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Backend_GetAllLinksClient interface {
	Recv() (*Link, error)
	grpc.ClientStream
}

type backendGetAllLinksClient struct {
	grpc.ClientStream
}

func (x *backendGetAllLinksClient) Recv() (*Link, error) {
	m := new(Link)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *backendClient) GetAllMetrics(ctx context.Context, in *AllMetricsRequest, opts ...grpc.CallOption) (Backend_GetAllMetricsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Backend_serviceDesc.Streams[2], c.cc, "/ng_rpc.Backend/GetAllMetrics", opts...)
	if err != nil {
		return nil, err
	}
	x := &backendGetAllMetricsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Backend_GetAllMetricsClient interface {
	Recv() (*Metric, error)
	grpc.ClientStream
}

type backendGetAllMetricsClient struct {
	grpc.ClientStream
}

func (x *backendGetAllMetricsClient) Recv() (*Metric, error) {
	m := new(Metric)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *backendClient) GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/ng_rpc.Backend/GetStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Backend service

type BackendServer interface {
	GetNodeById(context.Context, *NodeByIdRequest) (*Node, error)
	GetAllNodes(*NodesAllRequest, Backend_GetAllNodesServer) error
	GetLinkById(context.Context, *LinkByIdRequest) (*Link, error)
	GetAllLinks(*LinksAllRequest, Backend_GetAllLinksServer) error
	GetAllMetrics(*AllMetricsRequest, Backend_GetAllMetricsServer) error
	GetStatus(context.Context, *StatusRequest) (*StatusResponse, error)
}

func RegisterBackendServer(s *grpc.Server, srv BackendServer) {
	s.RegisterService(&_Backend_serviceDesc, srv)
}

func _Backend_GetNodeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(NodeByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BackendServer).GetNodeById(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Backend_GetAllNodes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NodesAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BackendServer).GetAllNodes(m, &backendGetAllNodesServer{stream})
}

type Backend_GetAllNodesServer interface {
	Send(*Node) error
	grpc.ServerStream
}

type backendGetAllNodesServer struct {
	grpc.ServerStream
}

func (x *backendGetAllNodesServer) Send(m *Node) error {
	return x.ServerStream.SendMsg(m)
}

func _Backend_GetLinkById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(LinkByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BackendServer).GetLinkById(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Backend_GetAllLinks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LinksAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BackendServer).GetAllLinks(m, &backendGetAllLinksServer{stream})
}

type Backend_GetAllLinksServer interface {
	Send(*Link) error
	grpc.ServerStream
}

type backendGetAllLinksServer struct {
	grpc.ServerStream
}

func (x *backendGetAllLinksServer) Send(m *Link) error {
	return x.ServerStream.SendMsg(m)
}

func _Backend_GetAllMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AllMetricsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BackendServer).GetAllMetrics(m, &backendGetAllMetricsServer{stream})
}

type Backend_GetAllMetricsServer interface {
	Send(*Metric) error
	grpc.ServerStream
}

type backendGetAllMetricsServer struct {
	grpc.ServerStream
}

func (x *backendGetAllMetricsServer) Send(m *Metric) error {
	return x.ServerStream.SendMsg(m)
}

func _Backend_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BackendServer).GetStatus(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Backend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ng_rpc.Backend",
	HandlerType: (*BackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNodeById",
			Handler:    _Backend_GetNodeById_Handler,
		},
		{
			MethodName: "GetLinkById",
			Handler:    _Backend_GetLinkById_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _Backend_GetStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllNodes",
			Handler:       _Backend_GetAllNodes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllLinks",
			Handler:       _Backend_GetAllLinks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllMetrics",
			Handler:       _Backend_GetAllMetrics_Handler,
			ServerStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 1426 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x56, 0xef, 0x8e, 0xda, 0x46,
	0x10, 0x0f, 0x60, 0x03, 0x5e, 0x38, 0xf0, 0xf9, 0x72, 0x89, 0x7b, 0x6d, 0xa4, 0xd4, 0xad, 0xaa,
	0x53, 0x2b, 0x9d, 0x12, 0xd4, 0x44, 0x51, 0x15, 0x45, 0x82, 0x3b, 0x72, 0x41, 0x21, 0x80, 0x0c,
	0x97, 0xab, 0xfa, 0x65, 0xeb, 0xb3, 0x37, 0x77, 0x2e, 0xc6, 0x76, 0xfc, 0x27, 0xc9, 0x3d, 0x46,
	0x1f, 0xa0, 0xea, 0xcb, 0xf4, 0x6b, 0x1f, 0xa4, 0xea, 0x4b, 0x74, 0x66, 0x97, 0x05, 0xc3, 0x9d,
	0x2a, 0xb5, 0x5f, 0x10, 0xfb, 0x9b, 0x99, 0x9d, 0xd9, 0x99, 0xdf, 0x8c, 0x87, 0xe8, 0xe1, 0x25,
	0xbd, 0x70, 0xdc, 0x39, 0x0b, 0xbd, 0xa3, 0x38, 0x89, 0xb2, 0xc8, 0xa8, 0x02, 0x92, 0xc4, 0xae,
	0xf5, 0x33, 0xd9, 0xed, 0x06, 0xc1, 0x1b, 0x96, 0x25, 0xbe, 0x9b, 0xda, 0xec, 0x7d, 0xce, 0xd2,
	0xcc, 0x68, 0x91, 0x6a, 0x48, 0xd3, 0xb9, 0x1f, 0x9b, 0xa5, 0x87, 0xe5, 0xc3, 0x8a, 0x38, 0x67,
	0xce, 0x9c, 0x99, 0x65, 0x7e, 0x36, 0x89, 0xfe, 0xce, 0x0f, 0x32, 0x96, 0xd0, 0xab, 0x28, 0xcd,
	0x68, 0xe8, 0x2c, 0x98, 0x59, 0x01, 0x49, 0xdd, 0xd8, 0x25, 0xda, 0x1a, 0x22, 0x0f, 0x4b, 0x87,
	0x9a, 0xf5, 0x5b, 0x89, 0x54, 0xc5, 0xfd, 0x46, 0x93, 0x28, 0x5c, 0x80, 0xb7, 0x6a, 0xc6, 0x97,
	0x44, 0x99, 0xfb, 0xa1, 0xc7, 0xef, 0x6c, 0x75, 0xf6, 0x8e, 0x44, 0x44, 0x47, 0x42, 0xf7, 0xe8,
	0x35, 0x88, 0xf0, 0xba, 0x90, 0x26, 0xcc, 0x8d, 0x12, 0x2f, 0xe5, 0x1e, 0xb8, 0xef, 0xcc, 0x5f,
	0x30, 0x1a, 0x38, 0xe0, 0x46, 0x88, 0x4c, 0x05, 0x25, 0xd6, 0x13, 0xa2, 0x70, 0x23, 0x8d, 0xa8,
	0xa7, 0xdd, 0xb3, 0xd3, 0xbe, 0x5e, 0x32, 0x08, 0xa9, 0x9e, 0xf4, 0xed, 0xc1, 0xdb, 0xbe, 0x5e,
	0x36, 0x1a, 0xa4, 0x76, 0x3c, 0x3e, 0x1b, 0xcd, 0xfa, 0xb6, 0x5e, 0x41, 0x9d, 0xf1, 0xec, 0x15,
	0xfc, 0x55, 0xac, 0x07, 0x64, 0x67, 0x9a, 0x39, 0x59, 0xbe, 0x7a, 0x3d, 0x44, 0x89, 0x1e, 0xc4,
	0xdb, 0xad, 0x3e, 0x69, 0x49, 0x71, 0x1a, 0x47, 0x61, 0xca, 0x8c, 0x36, 0xa9, 0x85, 0x34, 0x8c,
	0x3c, 0x96, 0x72, 0x15, 0x55, 0x00, 0x81, 0x1f, 0xce, 0x53, 0xfe, 0x16, 0x55, 0x84, 0xbd, 0x10,
	0x39, 0xe5, 0x61, 0xab, 0x96, 0x45, 0xda, 0x43, 0xd0, 0xe8, 0x5d, 0x0f, 0x3c, 0xe9, 0x07, 0xcc,
	0xd0, 0x88, 0xfa, 0x9e, 0xb8, 0xc7, 0xea, 0x08, 0x9d, 0x14, 0x0a, 0x52, 0xd4, 0xc1, 0x87, 0x4a,
	0x9d, 0xad, 0x52, 0xa8, 0x96, 0x4d, 0xda, 0x23, 0x08, 0x65, 0xeb, 0x5e, 0x8c, 0x6e, 0x6d, 0xb3,
	0x4f, 0x76, 0xfc, 0xd0, 0x0d, 0x72, 0xc0, 0x52, 0x78, 0x8a, 0x30, 0xad, 0x1b, 0xf7, 0x49, 0x5b,
	0xc2, 0x9b, 0xb1, 0x5e, 0x8a, 0x3b, 0xff, 0x4b, 0x1c, 0x37, 0x7d, 0x08, 0x3e, 0x7c, 0x41, 0xee,
	0x4a, 0x98, 0xdb, 0x4b, 0x47, 0x0a, 0x77, 0xf4, 0x47, 0x85, 0x28, 0xf8, 0x62, 0xa8, 0x53, 0xb9,
	0x18, 0x2d, 0xdc, 0x90, 0x64, 0x54, 0x3e, 0x42, 0x38, 0xd8, 0x23, 0x0d, 0x60, 0xef, 0x0a, 0xac,
	0x48, 0xd0, 0xbb, 0xa0, 0x42, 0xdd, 0x47, 0x1e, 0x94, 0x44, 0xf6, 0x01, 0x44, 0x65, 0x80, 0x54,
	0x0e, 0x41, 0xf8, 0xef, 0x73, 0x27, 0xf0, 0xb3, 0x6b, 0xb3, 0x2a, 0x01, 0x37, 0x5a, 0x2c, 0x58,
	0x98, 0x99, 0x35, 0x64, 0xa9, 0xf1, 0x15, 0x14, 0xfd, 0x3a, 0x66, 0x66, 0x1d, 0x4e, 0xad, 0xce,
	0xbe, 0x24, 0x23, 0x46, 0xc7, 0x7f, 0x66, 0x20, 0x44, 0xee, 0x25, 0x9f, 0x68, 0xe4, 0x66, 0x2c,
	0x4b, 0x97, 0x4f, 0x31, 0x35, 0x6e, 0x8e, 0xac, 0xdc, 0x96, 0x70, 0xfa, 0xe3, 0x73, 0x5c, 0x27,
	0x76, 0x5c, 0xf0, 0x4d, 0x17, 0x17, 0x7e, 0x66, 0x36, 0x78, 0x00, 0x10, 0x79, 0x9a, 0xb8, 0x34,
	0xfd, 0x48, 0xe3, 0x28, 0xc9, 0xcc, 0xa6, 0x04, 0x3d, 0x48, 0x92, 0x04, 0x77, 0x10, 0xb4, 0x7e,
	0x2f, 0x91, 0xfa, 0x2a, 0x02, 0xe0, 0xed, 0xcb, 0x41, 0x0f, 0x78, 0x7b, 0x07, 0x94, 0xdb, 0xfc,
	0x2f, 0x9d, 0xd9, 0xdd, 0xd1, 0x74, 0x32, 0xb6, 0x67, 0x82, 0xf0, 0xc7, 0xe3, 0xc9, 0x04, 0x14,
	0xca, 0xc0, 0xe3, 0xba, 0xdd, 0x3d, 0x19, 0x8c, 0xe9, 0x79, 0x0f, 0x18, 0x7f, 0x97, 0xe8, 0xe2,
	0xf4, 0xec, 0x51, 0xe7, 0xf1, 0x63, 0xda, 0x39, 0x7d, 0xf5, 0x93, 0xae, 0x6c, 0xa3, 0x4f, 0x10,
	0x55, 0xd7, 0x96, 0xc3, 0x9e, 0x5e, 0x35, 0x6a, 0xa4, 0x72, 0x3a, 0x7d, 0xa3, 0xd7, 0xf0, 0xcf,
	0x8f, 0x9d, 0x27, 0x7a, 0xdd, 0xd8, 0x21, 0xda, 0x64, 0x7c, 0xde, 0xb7, 0x87, 0x83, 0x51, 0x5f,
	0xd7, 0xac, 0xbf, 0x4a, 0x44, 0x13, 0x5d, 0xfb, 0xd6, 0x09, 0xb6, 0x9a, 0xbc, 0xb9, 0xcc, 0x6b,
	0x99, 0x9f, 0xbe, 0x5e, 0xb6, 0x7c, 0x85, 0xb7, 0xfc, 0xbd, 0xcd, 0x96, 0x07, 0x63, 0xd1, 0xf5,
	0xb2, 0x01, 0x91, 0x24, 0x0a, 0x26, 0xe5, 0xd2, 0xc9, 0x2f, 0x19, 0xfd, 0xe0, 0x04, 0x39, 0xe3,
	0x05, 0x2d, 0x43, 0xdc, 0x4d, 0x8f, 0x25, 0xfe, 0x07, 0x89, 0x62, 0x55, 0x2b, 0x3c, 0xd7, 0x51,
	0x1e, 0xe2, 0x60, 0x12, 0x30, 0xd6, 0xb6, 0x8a, 0x37, 0x44, 0xd9, 0xd5, 0x0a, 0xc4, 0x12, 0x37,
	0xff, 0xef, 0xb4, 0xf8, 0x55, 0x21, 0x0a, 0x36, 0xc7, 0x06, 0x65, 0xe5, 0x93, 0xc5, 0x23, 0x81,
	0x5b, 0x8e, 0xe7, 0x25, 0x2c, 0xc5, 0x7e, 0x42, 0x0a, 0xec, 0x10, 0x75, 0x01, 0x26, 0x01, 0xe7,
	0xa7, 0x86, 0xe1, 0x2c, 0x1c, 0x97, 0x4a, 0x1d, 0x95, 0x83, 0x0d, 0x52, 0xf1, 0xe3, 0xef, 0xf9,
	0x3b, 0x76, 0xc4, 0xe1, 0x29, 0x8f, 0xbe, 0x59, 0xa4, 0x6a, 0x5d, 0x5e, 0x07, 0xfc, 0x06, 0xe7,
	0x9a, 0xa4, 0x7b, 0x98, 0x2f, 0x38, 0x63, 0x52, 0xce, 0xb9, 0x1a, 0x7a, 0xf0, 0x5d, 0x3f, 0xbc,
	0x74, 0xc4, 0x1c, 0x6e, 0x70, 0x33, 0xe8, 0xd8, 0x14, 0x52, 0xe6, 0x04, 0x9c, 0x6c, 0x38, 0x7e,
	0xab, 0xbc, 0x53, 0x53, 0xe0, 0x59, 0xe5, 0xb0, 0xd1, 0xd9, 0x95, 0xd5, 0xc0, 0xe7, 0xe1, 0xc8,
	0x63, 0xc6, 0x0b, 0x62, 0x14, 0xba, 0x56, 0xa4, 0x2f, 0x35, 0x5b, 0x5c, 0xdd, 0x2a, 0xaa, 0x1f,
	0x0d, 0x41, 0x6d, 0x55, 0x45, 0x50, 0xea, 0x87, 0x59, 0x72, 0xbd, 0x6a, 0xaa, 0xf6, 0x66, 0x53,
	0x71, 0x0b, 0xfc, 0x41, 0x4a, 0x1f, 0xcc, 0xc8, 0xfe, 0xed, 0xd6, 0x90, 0x85, 0x39, 0xbb, 0x86,
	0x14, 0x63, 0xb4, 0xdf, 0x12, 0x55, 0x54, 0xaf, 0x0c, 0xc7, 0x46, 0xe7, 0xf3, 0x1b, 0xd4, 0x39,
	0x8e, 0x82, 0x80, 0xb9, 0x99, 0x1f, 0x85, 0x3f, 0x94, 0x9f, 0x95, 0xac, 0x5f, 0x48, 0x5d, 0x7a,
	0x30, 0xaa, 0xa4, 0x3c, 0x3d, 0x87, 0x8e, 0x81, 0xfa, 0x4e, 0xfb, 0xf6, 0x5b, 0xa8, 0x23, 0xaf,
	0xb5, 0x3d, 0x3e, 0x9b, 0xf1, 0x46, 0x01, 0x3a, 0xaf, 0x7b, 0xa8, 0x02, 0x09, 0x6f, 0x9c, 0x0f,
	0xec, 0xfe, 0xb0, 0x3f, 0x9d, 0xd2, 0xee, 0x44, 0x47, 0x06, 0xb6, 0x57, 0x40, 0xcf, 0x1e, 0x9c,
	0x00, 0x59, 0xd4, 0x35, 0x27, 0xaa, 0xd6, 0x4b, 0xb2, 0x77, 0x4b, 0x18, 0x5b, 0xac, 0x80, 0x74,
	0x2f, 0xf3, 0x57, 0xda, 0x4c, 0xf7, 0xca, 0xd4, 0xfa, 0x53, 0x25, 0xda, 0x3a, 0xf9, 0xdf, 0x10,
	0x55, 0x4c, 0xd2, 0x12, 0x6f, 0x96, 0xfb, 0x37, 0xca, 0x73, 0x24, 0xf4, 0xbe, 0x23, 0xe4, 0xca,
	0x49, 0xbc, 0xc2, 0x68, 0xff, 0x17, 0xe5, 0xa7, 0x64, 0x17, 0x06, 0xbb, 0x9b, 0xf8, 0x71, 0x86,
	0xcd, 0xb3, 0x1e, 0xd5, 0xad, 0x75, 0x4a, 0xd7, 0x36, 0x27, 0xa0, 0x2a, 0xec, 0x70, 0xbc, 0xa7,
	0xb4, 0xe0, 0x47, 0xe1, 0xe3, 0x1d, 0xda, 0x10, 0xe0, 0x84, 0x39, 0xee, 0x95, 0x73, 0x11, 0x60,
	0x73, 0x22, 0x8a, 0xf4, 0x4b, 0xe9, 0xbb, 0xc0, 0x89, 0x63, 0x20, 0x21, 0x70, 0x7a, 0xad, 0xca,
	0x3e, 0x31, 0x37, 0xcf, 0x10, 0xad, 0x71, 0x14, 0x6a, 0x9c, 0x64, 0x48, 0xec, 0xf2, 0x21, 0x0e,
	0x2c, 0x25, 0x88, 0xa0, 0x23, 0x34, 0x79, 0xe2, 0x53, 0x80, 0xf0, 0x29, 0x80, 0xec, 0x8d, 0xf2,
	0xc4, 0x45, 0x36, 0x97, 0x05, 0x9b, 0xa3, 0x3c, 0x8b, 0x73, 0x1c, 0x9d, 0x78, 0x86, 0xeb, 0xb1,
	0x0b, 0x80, 0xe1, 0x1f, 0x7c, 0x97, 0x73, 0x1a, 0x1b, 0x13, 0x3e, 0x71, 0x45, 0x94, 0x46, 0x73,
	0x60, 0x2f, 0x0a, 0xe0, 0xbb, 0xb4, 0x21, 0xf8, 0xe8, 0x24, 0x21, 0x46, 0xd5, 0xbe, 0x55, 0x1a,
	0xc3, 0xc7, 0x04, 0xa5, 0x3a, 0x97, 0x3e, 0x20, 0xfb, 0x1b, 0x52, 0xc8, 0x66, 0xe6, 0xbb, 0xd0,
	0x57, 0xbb, 0xb7, 0x1a, 0xe7, 0xe1, 0x3c, 0x8c, 0x3e, 0x86, 0xa6, 0xc1, 0xa5, 0xd0, 0xbc, 0x61,
	0x84, 0x4d, 0xb7, 0x27, 0xc3, 0x86, 0xac, 0x78, 0x79, 0x1c, 0xc0, 0x0d, 0x90, 0xd6, 0xbb, 0x3c,
	0x2b, 0xf0, 0x35, 0xb9, 0x72, 0x52, 0x7a, 0xc1, 0x58, 0x48, 0xdd, 0x2b, 0x06, 0x7b, 0x9b, 0x67,
	0xee, 0xa3, 0xc4, 0x7a, 0x4e, 0x54, 0x51, 0x10, 0x18, 0xd1, 0xd3, 0x59, 0x77, 0xd6, 0xa7, 0x67,
	0x13, 0x60, 0x76, 0x8b, 0x10, 0x71, 0x3a, 0x19, 0x9f, 0x8f, 0x80, 0xdd, 0xfb, 0x64, 0x77, 0x29,
	0x1d, 0xd9, 0xfd, 0xee, 0xf1, 0xab, 0x6e, 0x6f, 0x08, 0x43, 0xcd, 0x5a, 0x10, 0x6d, 0x5d, 0x52,
	0xb0, 0x39, 0xa1, 0x85, 0x3b, 0x74, 0xd2, 0x94, 0xe7, 0xe5, 0x2d, 0xc0, 0x7b, 0x89, 0x9c, 0x77,
	0xed, 0xd1, 0x60, 0x74, 0x0a, 0xcd, 0x52, 0x00, 0xcf, 0x46, 0xaf, 0x47, 0xa8, 0xc9, 0x3f, 0x2e,
	0x12, 0x7c, 0x39, 0xec, 0x4e, 0x26, 0xa8, 0xaa, 0x74, 0xfe, 0x2e, 0x93, 0x5a, 0x4f, 0x6c, 0x9d,
	0x40, 0xbc, 0xc6, 0x29, 0xcb, 0xe4, 0xaa, 0x62, 0x6c, 0x10, 0xb4, 0xb0, 0xbc, 0x1c, 0x34, 0x8b,
	0x02, 0xeb, 0x8e, 0xf1, 0x8c, 0xdb, 0xc1, 0x26, 0xc2, 0x37, 0x92, 0x4d, 0xbb, 0xc2, 0x82, 0xb2,
	0x6d, 0xf7, 0xa8, 0xb4, 0xf4, 0x28, 0x97, 0xae, 0xb5, 0xe5, 0xd6, 0x1a, 0xb6, 0xb6, 0x44, 0x41,
	0xd1, 0x23, 0xdf, 0xc5, 0x36, 0xed, 0x6e, 0xf5, 0x28, 0xec, 0xc0, 0xe3, 0x0b, 0xb2, 0x23, 0x2c,
	0x97, 0xeb, 0xb4, 0xf1, 0x99, 0x54, 0xb9, 0xb1, 0x62, 0x1f, 0xb4, 0x36, 0xdb, 0x9f, 0xdb, 0x3f,
	0x27, 0x1a, 0xd8, 0x8b, 0x6d, 0xd3, 0x58, 0x4d, 0xcb, 0x8d, 0xe5, 0xf4, 0xe0, 0xde, 0x36, 0x2c,
	0x96, 0x52, 0xeb, 0xce, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd5, 0x17, 0x59, 0x67, 0xe4, 0x0b,
	0x00, 0x00,
}
